               ORG  $0AD0      ; Begin after last text storage loc.
GRPHL          EQU  $6
GRPHH          EQU  $7
CHRTBLBL       EQU  $8
CHRTBLBH       EQU  $9
RMS            EQU  $19        ;Right Margin Source mask
RMD            EQU  $1A        ;Right Margin Destination mask
LMS            EQU  $1B        ;Left Margin Source mask
LMD            EQU  $1C        ;Left Margin Destination mask
XBASL          EQU  $1D        ;Lo byte global 70,140 col. text base
XBASH          EQU  $1E        ;Hi byte ""
WORK           EQU  RMS        ; Scratchpad locations (WORK,X) for char. print
BASL           EQU  $28
BASH           EQU  $29
ZPG1           EQU  $2A        ;Itchpad
ZPG2           EQU  $2B        ;Itchpad
INVFLG         EQU  $32
VMODE          EQU  $4FB
VFACTV         EQU  $67B
EORNYB         EQU  $1FAC
EORNYB1        EQU  $1FAD
MARWID         EQU  $1FAE
INDEX          EQU  $1FAF
FONTADDR       EQU  $1FB0
WHEREMEM       EQU  $1FC4
CHARARG        EQU  $1FC6
ESCCURSR       EQU  $1FCA
ORBIT          EQU  $1FCE
ANDNYB         EQU  $1FCF
ANDNYB1        EQU  $1FD0
TXTNDX         EQU  $1FD1
ESCCURV        EQU  $1FD2
INVERTO        EQU  $1FD7
UNDRSCR        EQU  $1FD8
PAGE           EQU  $1FD9
GTLNCHK        EQU  $1FDA
BELVEC         EQU  $1FDE
KEYPRVEC       EQU  $1FE0
TBLIOVEC       EQU  $1FE2
DLYVAL         EQU  $1FE6
DLYLPCNT       EQU  $1FE7
STROF80        EQU  $C000      ;80STOREOFF
RAMRDOFF       EQU  $C002
RAMRDON        EQU  $C003
COL80OFF       EQU  $C00C      ;80COLOFF
RDBANK2        EQU  $C011
RDLCRAM        EQU  $C012
TEXTOFF        EQU  $C050
MIXEDOFF       EQU  $C052
PAGE2OFF       EQU  $C054
READBSR2       EQU  $C080
WRITBSR2       EQU  $C081
WRITBSR1       EQU  $C089
RDWRBSR2       EQU  $C083
RDWRBSR1       EQU  $C08B
HIRESON        EQU  $C057
SETID          EQU  $D000
SETREAD        EQU  $D00F
LOAD           EQU  $D05D      ;Entry pt., load work locs.
BASCALC        EQU  $FBC1      ; BASCALC without adding left margin.
WAIT           EQU  $FCA8
SETINV         EQU  $FE80
SETNORM        EQU  $FE84
               JMP  BOOTUP0
               ASC  " HRF.70 by MARQUE'"
               HEX  3838
               ASC  " systems "
STOREA         DS   1          ; Storage for accum. contents
STOREA1        DS   1          ; Storage for text moded result of above
PS             DS   1          ;Printer/screen indicator.
ESCFLG         DS   1          ; Escape code mode indicator (bit7 =1 = mode on)
BIND           DS   1
MEMWID         DS   1
TXTWID         DS   1
ATXTNDX        DS   1
LASTV          DS   1
RBASL          DS   1
RBASH          DS   1
BOOTUP0        JSR  IOSAVE
               LDA  WRITBSR2
               LDA  WRITBSR2   ;Enable initialization
               LDX  #$78
TRANSBYT       LDA  FREMEM-1,X
               STA  SETID-1,X
               DEX
               BNE  TRANSBYT
               BEQ  ABOUT
BOOTUP         JSR  IOSAVE
ABOUT          LDA  #$46       ; # of columns
               STA  $21
               LDA  #0         ; Left margin.
               STA  $20
               STA  $22        ; Top of screen.
               LDA  #$18       ; Bottom of screen.
               STA  $23
               STA  STROF80
               STA  COL80OFF
               LDA  TEXTOFF
               LDA  MIXEDOFF
               LDA  HIRESON
               LDA  PAGE2OFF
               LDY  #$4F
INITVEC        LDA  VECTBL,Y
               STA  FONTADDR,Y ;Start of my global vector table
               DEY
               BPL  INITVEC
               LDA  VMODE
               AND  #$D7
               ORA  #8
               STA  VMODE
               JSR  EVFON
               JSR  ESC@       ;CLEAR ZE SCREEN!
                               ;Check & move start of BASIC prog. addr.
               LDA  $68
               CMP  #$40
               BCS  HOOKUP     ;If already @ $4000, connect to O.S.
               LDA  #$40
               STA  $68
               STA  $6A
               STA  $6C
               STA  $6E
               STA  $B0
               LDX  #4
               STX  $69
               STX  $6B
               STX  $6D
               STX  $AF
               LDA  #1
               STA  $67
               LSR
STZ0           STA  $4000,X
               DEX
               BPL  STZ0
HOOKUP         LDA  #$80
               STA  PS
               JSR  OUTDEV
               JMP  SWREST
                               ;Save registers & bank switches.
IOSAVE         CLD
               STY  $35
               STX  $EB
               STA  STOREA
               STA  STOREA1
               LDA  BASL
               STA  RBASL
               LDA  BASH
               STA  RBASH
               PLA
               TAX
               PLA
               TAY
               INX
               BNE  NOHI
               INY
NOHI           STX  RETVECL
               STY  RETVECH
               BIT  RDBANK2
               PHP
               BIT  RDLCRAM
               PHP
               LDA  WRITBSR1
               LDA  WRITBSR1
               HEX  4C
RETVECL        HEX  00
RETVECH        HEX  00
                               ;Output entry point.
KOUT2          JSR  IOSAVE
               JSR  ENVIRON
               CLC
               ROR  BIND
               LDA  STOREA
               BIT  VFACTV
               BPL  ACTIV
               CMP  #$A0
               BCC  ISCTRL
               AND  INVFLG
ISCTRL         STA  STOREA1
               JSR  PROCESS
               JMP  IOREST
ACTIV          JSR  VFPROC
IOREST         LDA  STOREA
XYREST         JSR  RESTBAS
               LDY  $35
               LDX  $EB
               JMP  SWITCHES
SWREST         JSR  RESTBAS
SWITCHES       PLP
               BPL  NOBANX
               PLP
               BPL  DX1
               BIT  RDWRBSR2
               BIT  RDWRBSR2
               RTS
DX1            BIT  RDWRBSR1
               BIT  RDWRBSR1
               RTS
NOBANX         PLP
               RTS
                               ;Restore $28.29 contents
RESTBAS        LDX  RBASH
               STX  BASH
               LDX  RBASL
               STX  BASL
               RTS
                               ;PROCESS CONTROL CODES.
PROCESS        BIT  ESCFLG     ;Escape mode on?
               BPL  CTLOOK     ;=> no
               JMP  ESCPROC
CTLOOK         TAX
               BPL  LEGJMP
               CMP  #$A0
               BCC  KRTL
LEGJMP         JMP  LEGAL2
KRTL           LDX  #9         ;Global special ctrls
DYCTRL         PHA
               LDA  VMODE
               AND  #$28
               EOR  #8
               BNE  CTRL5      ;=>Ctrls disabled
               PLA
CTLMTCH        CMP  EVFTBL,X
               BEQ  EGZEK
               DEX
               BPL  CTLMTCH
               BMI  CTRL51
EGZEK          TXA
               CMP  #5
               BCC  STAKIT
               ADC  #1
               CLC
STAKIT         ADC  #2
               ASL
               JMP  SUBROUTE
CTRL5          PLA
CTRL51         CMP  #$8D
               BNE  LEFT4      ;                       ___
               TSX             ;                          |
               LDA  $10C,X     ;High byte return address. |
               CMP  #$D7       ;                          | Check for
               BNE  CROUT2     ;                          |-BASIC LIST
               LDA  $10B,X     ;Low byte return address.  | cariage return.
               CMP  #$D        ;                          |
               BNE  CROUT2     ;                       ___|
               LDA  $24        ;Get horiz. position.
               CMP  #$3F       ;Is it @ or past 63rd col?
               BCS  CROUT2     ;=> yes
               LDA  #$11       ; ]_ NO, cause return address to
               STA  $10B,X     ; ]  skip past formatting code. (Ignore CR)
               RTS
                               ;Process remaining 4 control codes.
LEFT4          CMP  #$9B       ;Is Escape?
               BNE  LEFT3      ;=> no
IKSKAPE        SEC             ; \_
               ROR  ESCFLG     ; /  Turn on Escape mode flag
XIT            RTS
LEFT3          CMP  #$88       ;Is backspace?
               BNE  LEFT2      ;=> no
LEFT           DEC  $24
               BPL  XIT
               LDX  $21
               DEX
               STX  $24
UP             LDX  $25
               CPX  $22        ;Already @ top of window?
               BEQ  XIT        ;=> yes
               DEC  $25
NEWBAS         LDA  #$FF
               STA  LASTV
               RTS
LEFT2          CMP  #$87       ;Is it a bell?
               BNE  LEFT1      ;=> no
               JMP  (BELVEC)   ;Ring bell.
LEFT1          CMP  #$8A       ;Is it a line feed?
               BEQ  LINEFEED   ;=> yes
LEGAL          LDA  STOREA1
LEGAL1         STA  STOREA1
LEGAL2         JSR  BLSTCHR1   ;Treat as printable character.
               BIT  BIND       ;Wast yon karacktre non printy?
               BMI  XIT        ;=> da
RIGHT          INC  $24        ;Advance 1 screen pos.
               LDA  $24        ; \_
               CMP  $21        ; /  Czech for endo screen.
               BCS  NOPAUSE    ;=> was endo screen
               RTS
                               ;  ---Carriage returne processing---
CROUT2         LDY  $C000
               CPY  #$93       ;Is it CTRL-S?
               BNE  NOPAUSE    ;=> no
               BIT  $C010      ;Yes, turn off "key pressed" flag.
PAUSELP        LDY  $C000      ; \_ and pause until any
               BPL  PAUSELP    ; /  key is pressed.
               CPY  #$83       ;Was it CTRL-C?
               BEQ  NOPAUSE    ;=> yes, (don't turn off keypress flag)
               BIT  $C010      ;STROBE THAT KEYBOARD FLAG!!
NOPAUSE        LDA  #0
               STA  $24
LINEFEED       INC  $25
               LDA  $25        ; \_ @ bottom
               CMP  $23        ; /  of window?
               BCC  NEWBAS     ;=> no
               JSR  SCROLL
               LDX  $23
               DEX
               TXA
SETLYNE        STA  $25
               JMP  NEWBAS
                               ;EVF processing
VFPROC         BIT  ESCFLG
               BMI  ESCPROC
               TAX
               BPL  LEGAL2
               CMP  #$A0
               BCC  VFCTRL
               BIT  INVFLG
               BMI  LEGAL2
               AND  #$7F
               PHA
               LDA  VMODE
               LSR             ;Mausmoade?
               PLA
               BCC  LEGAL1     ;? le mice
               CMP  #$60
               BCS  LEGAL1
               CMP  #$40
               BCC  LEGAL1
               SBC  #$40
               BCS  LEGAL1
VFCTRL         LDX  #$F
               JMP  DYCTRL
                               ;Escape codes (output)
ESCPROC        CLC             ; \_
               ROR  ESCFLG     ; /  Turn flag off
               TAX
               BMI  LAMRON
               EOR  #$20
               AND  #$BF
               CLC
               ADC  #$A0
LAMRON         CMP  #$A0
               BEQ  SCOROFF
               CMP  #$DF
               BEQ  SCORON
               CMP  #$B0       ;-
               BCC  HLP        ; |-0 to 9
               CMP  #$BA       ;-
               BCS  HLP
               AND  #$F
               ASL
               STA  CHARARG
               RTS
HLP            JMP  LEGAL
SCOROFF        LDA  #0
               STA  UNDRSCR
               RTS
SCORON         LDA  #$80
               STA  UNDRSCR
               RTS
                               ;Extra CTRL code routines
DNSCRL         LDA  $25
               PHA
               JSR  DROP
               JMP  RESTCV
UPSCRL         LDA  $25
               PHA
               JSR  SCROLL
RESTCV         PLA
               STA  $25
               JMP  NEWBAS
                               ;
HOUSE          LDA  #0
               STA  $24
               LDA  $22
               STA  $25
               RTS
                               ;
ENTLN          LDA  $25
               JSR  KLERINT
               LDA  $20
               STA  BASL
               LDA  $21
               STA  BASH
               JSR  SCRLINIT
               LDA  CHRTBLBL
               STA  LINSTRS
               JSR  BLAK
               JMP  NEWBAS
                               ;
EVFON          CLC
               HEX  24         ;(BIT zpg)
EVFOFF         SEC
               ROR  VFACTV
               RTS
                               ;
MAUSON         LDA  VMODE
               AND  #$FE
EMMAUS         STA  VMODE
               RTS
MAUSOFF        LDA  VMODE
               ORA  #1
               BNE  EMMAUS
                               ;
INVON          JSR  SETINV
               LDA  VMODE
               ORA  #4
               BNE  EMMAUS
INVOFF         JSR  SETNORM
               LDA  VMODE
               AND  #$FB
               JMP  EMMAUS
                               ;SCROLL ROUTINE
DESTLN         JSR  BASCALC    ;Init destination line
               STA  SLTEXT1
               STA  GRPHL
               LDA  BASH
               STA  SHTEXT1
               CLC
               ADC  PAGE
               ADC  #$1C
               STA  GRPHH
               RTS
                               ;Init source line
SRCLN          JSR  BASCALC
               STA  SLTEXT
               STA  CHRTBLBL
               LDA  BASH
               STA  SHTEXT
               CLC
               ADC  PAGE
               ADC  #$1C
               STA  CHRTBLBH
               RTS
                               ;Extra 30 cols. dest. init
AUXDEST        JSR  EXBAS
               TAY
               LDA  XBASL
               STA  ALTEXT1
               STY  AHTEXT1
               RTS
                               ;(downscrollheer)
DROP           SEC
               ROR  BIND
               LDY  $23
               DEY
               STY  $25
               TYA
               JSR  DESTLN
               DEY
               TYA
               JSR  SRCLN
               LDA  $25
               JSR  AUXDEST
               SEC
               SBC  #$1E
               STA  ALTEXT
               BCS  SUCC
               DEY
SUCC           JMP  SAMCOD
                               ;(upscrollheer)
SCROLL         CLC
               ROR  BIND
               LDY  $22
               TYA
               INY
               STY  $25
               JSR  DESTLN
               TYA
               JSR  SRCLN
               LDA  $22
               JSR  AUXDEST
               CLC
               ADC  #$1E
               STA  ALTEXT
               BCC  SAMCOD
               INY
SAMCOD         STY  AHTEXT
               LDA  $20
               LDX  $21
               STA  BASL
               STX  BASH
               JSR  SCRLINIT
               LDX  CHRTBLBH
               SEC
               LDY  #$2A       ;Count for loop.
INITSTRS       LDA  CHRTBLBL
               STA  LINSTRS,Y
               TXA
               STA  HINSTRS,Y
               SBC  #4
               TAX
               LDA  GRPHH
               STA  HINSTRS1,Y
               SBC  #4
               STA  GRPHH
               LDA  GRPHL
               STA  LINSTRS1,Y
               TYA
               SBC  #6
               TAY
               BCS  INITSTRS
GETY           LDY  INDEX
               BIT  MARWID     ;Do right margin operation?
               BVC  BYTCOP     ;=> no
               LDA  RMS        ;    >>> RIGHT MARGINING <<<
               STA  BASL
               LDA  RMD
               STA  BASH
               JSR  MARKOP
               DEY
               BMI  TXTLN
               BIT  MARWID
BYTCOP         BMI  COPY       ;=> do byte copy
               BIT  BCTERM
               BMI  STRTLM     ;=> do left margin
               BPL  TXTLN      ;otherwise...
                               ;  _____I AM THE GREAT BYTE COPY!_____
COPY           HEX  B9         ;--LDA abs-addr,Y
LINSTRS        HEX  FF         ; self modified l.b. operand.
HINSTRS        HEX  FF         ; self modified h.b. operand.
               HEX  99         ;--STA abs-addr,Y
LINSTRS1       HEX  FF         ; self mod. l.b. operand.
HINSTRS1       HEX  FF         ; self mod. h.b. operand.
                               ; _____
               LDA  $FFFF,Y    ;      |
               STA  $FFFF,Y    ;      |
               LDA  $FFFF,Y    ;      |
               STA  $FFFF,Y    ;      |
               LDA  $FFFF,Y    ;      |
               STA  $FFFF,Y    ;      |
               LDA  $FFFF,Y    ;      |_ Self modified bank of LDA-STA
               STA  $FFFF,Y    ;      |  pairs for scrolling graphics.
               LDA  $FFFF,Y    ;      |
               STA  $FFFF,Y    ;      |
               LDA  $FFFF,Y    ;      |
               STA  $FFFF,Y    ;      |
               HEX  B9FF       ;      |
HINSTRS2       HEX  FF         ;      |
               STA  $FFFF,Y    ; _____|
                               ;
               DEY
BCTERM         BPL  COPY       ;Self mod branch, either BNE or BPL
               BMI  TXTLN      ;=> no left margining
STRTLM         LDA  LMS        ;    ]]] LEFT MARGINING [[[
               STA  BASL
               LDA  LMD
               STA  BASH
               JSR  MARKOP
TXTLN          BIT  TXTWID
               BMI  STDTXT
               BVC  AUXTXT
STDTXT         LDY  TXTNDX     ;Copy standard text storage area
STXTCPY        HEX  B9         ;LDA abs,Y
SLTEXT         HEX  FF
SHTEXT         HEX  FF
               HEX  99         ;STA abs,Y
SLTEXT1        HEX  FF
SHTEXT1        HEX  FF
               DEY
               BPL  STXTCPY    ;=> gobakan' copy agin
               BIT  TXTWID     ;Scroll auxilliary text area also?
               BPL  CHKLN      ;=> no
AUXTXT         LDY  ATXTNDX    ;       COPY AUXILLIARY AREA
ATXTCPY        HEX  B9         ;LDA abs,Y
ALTEXT         HEX  FF
AHTEXT         HEX  FF
               HEX  99         ;STA abs,Y
ALTEXT1        HEX  FF
AHTEXT1        HEX  FF
               DEY
               BPL  ATXTCPY
                               ;Reinitialization
CHKLN          LDY  $25        ;Git line #
               BIT  BIND
               BPL  UPCHEK     ;=> scroll up
               DEY
               CPY  $22        ;Bottom line @ top?
               BNE  BLECH      ;=> no
               JMP  BLAK
UPCHEK         INY
               CPY  $23        ;Bottom line > bottom?
               BCC  BLECH      ;=> no
               JMP  BLAK
BLECH          STY  $25        ;Store line #
               LDA  HINSTRS2
               CPY  #8
               BEQ  WCHTHRD
               CPY  #$10
               BNE  REG
                               ;LINES CROSSING SCREEN THIRDS INITIALIZATION
WCHTHRD        BIT  BIND
               BPL  THOIDS
               CLC
               ADC  #3
               TAX             ;For down
               LDA  LINSTRS
               ADC  #$58
               BMI  IOPNST
                               ;
THOIDS         SEC
               SBC  #3
               TAX             ;For up
               LDA  LINSTRS
               SBC  #$58
               BPL  IOPNST
                               ;LINES MOVING WITHIN THIRDS INITIALIZATION
REG            TAX
               LDA  LINSTRS
               BIT  BIND
               BPL  UPREG
               EOR  #$80
               BPL  IOPNST     ;For down
               DEX
               BNE  IOPNST
                               ;
UPREG          EOR  #$80
               BMI  IOPNST     ;For up
               INX
IOPNST         STA  ZPG2       ;  \/ REINITIALIZING LOOP /\
               LDY  #$2A
               SEC
OPINST         LDA  HINSTRS,Y
               STA  HINSTRS1,Y
               LDA  LINSTRS,Y
               STA  LINSTRS1,Y
               TXA
               STA  HINSTRS,Y
               SBC  #4
               TAX
               LDA  ZPG2
               STA  LINSTRS,Y
               TYA
               SBC  #6
               TAY
               BCS  OPINST     ;---End of said loop---
               TXA
               ADC  #4
               SEC
               SBC  PAGE
               LDX  SHTEXT
               STX  SHTEXT1
               LDX  SLTEXT
               STX  SLTEXT1
               STA  SHTEXT
               LDA  ZPG2       ;A low byte
               LDX  CHRTBLBL   ;\
               STX  GRPHL      ; |- For the sake of the margining routines
               STA  CHRTBLBL   ;/
               SBC  ZPG1       ;Rid of graphics offset
               CLC
               ADC  $20        ;Proper txt offst
               STA  SLTEXT
               LDA  ALTEXT     ;----
               LDY  AHTEXT     ;    |
               STA  ALTEXT1    ;    |
               STY  AHTEXT1    ;    |
               BIT  BIND       ;    |
               BPL  UPADD      ;    |
               SEC             ;down|
               SBC  #$1E       ;    |  Reinitialize
               STA  ALTEXT     ;    |_ le auxilliary
               BCS  ROMP       ;    |  text operands
               DEY             ;    |
               BCC  ROMP       ;    |
UPADD          CLC             ; up |
               ADC  #$1E       ;    |
               STA  ALTEXT     ;    |
               BCC  ROMP       ;    |
               INY             ;    |
ROMP           STY  AHTEXT     ;----
               JMP  GETY       ; and copy another line.
                               ;__ BLACK OUT A LINE (or section of) ONSCREEN.
BLAK           LDX  SLTEXT     ;  |
               LDA  SHTEXT     ;  |
               STA  SHTXSTA    ;  |
               STX  SLTXSTA    ;  |_ Transfer the
               LDA  ALTEXT     ;  |  text addresses
               LDX  AHTEXT     ;  |
               STA  ALTXSTA    ;  |
               STX  AHTXSTA    ;__|
               LDY  BCTERM
               STY  BLKBC
               LDA  HINSTRS
               LDX  LINSTRS
               CLC
               ADC  #$1C
               SEC
               LDY  #$15
BLKINIT        STA  HGRSTA,Y
               SBC  #4
               STA  ZPG2
               TXA
               STA  LGRSTA,Y
               LDA  ZPG2       ; __
               DEY             ;   |
               DEY             ;   |- Continue loop?
               DEY             ; __|
               BPL  BLKINIT    ;=> yes
               LDA  #0
               LDY  #$A0
               BIT  VFACTV
               BMI  CLEARSET
               BIT  INVFLG
               BMI  CLEARSET
               CLC
               LDA  #$7F
               LDY  #$20
CLEARSET       ROR  BIND
               STA  XBASL
               STY  XBASH
               LDY  INDEX
               BIT  MARWID
               BVC  BYTBLK     ;=> no right margining
               LDA  RMD
               STA  BASH
               LDA  RMS        ;\_
               STA  BASL       ;/  In case of EVF inverse
               JSR  MARBLAQ
               DEY
               BMI  TXTBLK
               BIT  MARWID
BYTBLK         BMI  BLK        ;=> do byte clearing
               BIT  BLKBC      ;Do left mar?
               BMI  BLAKLM     ;=> yes
               BPL  TXTBLK     ;uddervise...
                               ;___I AMT ZEIN GREAT BYTE CLEAR!___
BLK            LDA  XBASL
               HEX  99         ;--STA abs-addr,Y
LGRSTA         HEX  FF         ;  l.b. operand
HGRSTA         HEX  FF         ;  h.b. operand
                               ; ___
               STA  $FFFF,Y    ;    |
               STA  $FFFF,Y    ;    |
               STA  $FFFF,Y    ;    |  De bank de
               STA  $FFFF,Y    ;    |- modified code
               STA  $FFFF,Y    ;    |  STA instructions.
               STA  $FFFF,Y    ;    |
               STA  $FFFF,Y    ; ___|
                               ;
               DEY
BLKBC          BPL  BLK        ;Self mod branch, either BNE or BPL
               BMI  TXTBLK     ;=> no L.M.
BLAKLM         LDA  LMD
               STA  BASH
               LDA  LMS        ;\_
               STA  BASL       ;/  In case of EVF inverse
               JSR  MARBLAQ
TXTBLK         LDA  XBASH      ;Inverse or normal space
               BIT  TXTWID
               BMI  STDBLK
               BVC  AUXTXBLK
STDBLK         LDY  TXTNDX
STXBLK         HEX  99         ;STA abs,Y
SLTXSTA        HEX  FF
SHTXSTA        HEX  FF
               DEY
               BPL  STXBLK
               BIT  TXTWID     ;Black out aux text line?
               BPL  FINISHD    ;=> no
AUXTXBLK       LDY  ATXTNDX
ATXBLK         HEX  99         ;STA abs,Y
ALTXSTA        HEX  FF
AHTXSTA        HEX  FF
               DEY
               BPL  ATXBLK
FINISHD        RTS
                               ;Margin copy
MARKOP         SEC
               LDX  #$2A
MCOPY          LDA  HINSTRS1,X
               STA  GRPHH
               LDA  HINSTRS,X
               STA  CHRTBLBH
               LDA  (CHRTBLBL),Y ;The real seal!
               AND  BASL
               STA  ZPG2
               LDA  (GRPHL),Y  ;Get byte from upper line
               AND  BASH
               ORA  ZPG2
               STA  (GRPHL),Y
               TXA
               SBC  #6
               TAX
               BPL  MCOPY
               RTS
                               ;Margin clear
MARBLAQ        LDX  #$15
MBLAK          LDA  HGRSTA,X
               STA  CHRTBLBH
               LDA  (CHRTBLBL),Y
               BIT  BIND
               BMI  BLACQ
               ORA  BASL
               BNE  BORKUM
BLACQ          AND  BASH
BORKUM         STA  (CHRTBLBL),Y
               DEX
               DEX
               DEX
               BPL  MBLAK
               RTS

* INIT FLAGS/MASKS/ADDRSSES/INDECIES FOR SCRLLNG/CLEARING *
SCRLINIT       LDA  BASL
               JSR  INDECES
               TXA
               STA  LMD        ;save subcol for left margin
               LSR
               CLC
               ADC  INDEX
               STA  ZPG1
               ADC  GRPHL      ;]_ dest. (top line)
               STA  GRPHL      ;]  base addr
               LDA  ZPG1
               ADC  CHRTBLBL   ;]_ source (2nd line)
               STA  CHRTBLBL   ;]  base addr
               LDY  BASH
               DEY
               TYA
               ADC  BASL       ;Get absolute loc. of R.M. col.
               JSR  INDECES
               TXA
               STA  RMD        ;save subcol for right mar.
               LSR
               BCC  AD
               INC  INDEX
               CLC
AD             ADC  INDEX
               SEC
               SBC  ZPG1
               STA  INDEX      ;Graphics screen index
               LDA  BASL       ;TEXT ADRESSING
               CMP  #$29
               ROR
               EOR  #$80
               STA  TXTWID
               LDA  BASL
               CLC
               DEC  BASH
               ADC  BASH
               CMP  #$28
               ROR
               AND  TXTWID
               BMI  BOTH       ;=> both areas used
               CLC
               HEX  24         ;(BIT $38)
BOTH           SEC
               ROR  TXTWID
               LDA  BASL
               CLC
               ADC  SLTEXT1
               STA  SLTEXT1
               LDA  BASL
               ADC  SLTEXT
               STA  SLTEXT
               LDA  BASL       ;---
               SEC
               SBC  #$28       ;   |- area L.M.
               BPL  STRH       ;   |  base offset
               LDA  #0         ;---
STRH           STA  ZPG2
               CLC
               ADC  ALTEXT1
               STA  ALTEXT1
               BCC  NOINK
               INC  AHTEXT1
               CLC
NOINK          LDA  ZPG2
               ADC  ALTEXT
               STA  ALTEXT
               BCC  NOINCK
               INC  AHTEXT
NOINCK         LDA  BASH
               BIT  TXTWID     ;How to fix the text indeces
               BMI  SPLIT
               STA  TXTNDX
               STA  ATXTNDX
               BPL  FIXMAR
SPLIT          CLC
               ADC  BASL
               SEC
               SBC  #$28
               STA  ATXTNDX
               LDA  BASH
               SBC  ATXTNDX
               STA  TXTNDX
               DEC  TXTNDX
                               ;Initialize margin flags/masks
FIXMAR         LDA  RMD        ;RIGHT MARGIN
               CMP  #6
               BEQ  NOTRM      ;=> no R.M.
               TAX
               LDA  BASH       ;Total # of cols. = 1?
               BNE  SETMSK     ;=> no
               CPX  #2
               BEQ  X6
               CPX  #4
               BNE  SETMSK
               LDX  #7
               HEX  2C         ;(BIT)
X6             LDX  #6
SETMSK         LDA  LDRSMSK,X
               STA  RMS
               LDA  LSRDMSK,X
               STA  RMD
               SEC
               HEX  24         ;(BIT $18)
NOTRM          CLC
               ROR  MARWID     ;7 bit:0 = no R.M.
               LDX  BASH       ;Recover cols. #   BYTE COPY
               LDA  LMD
               DEX             ;# of cols <2?
               BMI  NOBYTCPY   ;=> yes
               BEQ  TWOCOL     ;=> is 2
               DEX
               BNE  BYTCPY     ;=> >3
               CMP  #2         ;Subcol =2?
               BEQ  NOBYTCPY
               BNE  BYTCPY
TWOCOL         CMP  #5         ;If subcol = 5,
               BEQ  BYTCPY
               TAX             ;  or 0,
               BEQ  BYTCPY     ;  do byte copy.
NOBYTCPY       CLC
               HEX  24         ;(BIT)
BYTCPY         SEC
               ROR  MARWID     ;7 bit:0 = no byte copy
                               ;6 bit:0 = no R.M.
               TAX             ; subcol=0?    LEFT MARGIN
               BEQ  NOTLM
               LDA  BASH       ;# cols. =1?
               BNE  DOLM       ;=> no
               CPX  #2
               BEQ  NOTLM
               CPX  #4
               BEQ  NOTLM
DOLM           DEX
               LDA  LDRSMSK,X
               STA  LMD
               LDA  LSRDMSK,X
               STA  LMS
               LDA  #$D0       ;Opcode for BNE
               HEX  2C         ;(BIT $10A9)
NOTLM          LDA  #$10       ;Opcode for BPL
               STA  BCTERM
               RTS
                               ;RESORT INVERSE VALUES
RESORT         CMP  #$20
               BCS  FLASHE
               ADC  #$40       ;Inv caps
               BCC  INVSET
FLASHE         CMP  #$40
               BCC  INVSET     ;=> Inv symbs
               CMP  #$60
               BCS  INVSET     ;=> Inv lc
               SEC
               SBC  #$40       ;Inv CTRL chrs
INVSET         ORA  #$80
               LDY  #$FF
               STY  INVERTO
               LDY  CHRTBLBL
               STY  WORK
               LDY  CHRTBLBH
               STY  RMD
               LDY  #1
               BNE  MAXN
                               ;PRINT A CHARACTER, EXTERNAL ENTRY PT.
BLSTCHR        JSR  IOSAVE
               SEC
               ROR  BIND
               JSR  ENVIRON
                               ;INTERNAL ENTRY PT.
BLSTCHR1       LDA  INVERTO    ; \_
               PHA             ; /  Save text mode
               LDA  READBSR2   ;Allow use of D000 code
               LDX  #0
               LDY  CHARARG
               LDA  FONTADDR,Y
               STA  CHRTBLBL
               STA  WORK
               LDA  FONTADDR+1,Y
               STA  CHRTBLBH
               STA  RMD
               TYA
               LSR
               CMP  #8         ;Use 2nd bit map?
               BCC  FORST
               INX             ;Yes
FORST          TAY
               LDA  BITMSK,Y   ;(10 bytes)
               LDY  #0
               AND  WHEREMEM,X ;Aux or main mem?
               CLC
               BEQ  RWHORE     ;=> main
               SEC
RWHORE         ROR  MEMWID     ;7 bit: 1 = set in aux mem
               JMP  SETID
GOTSIZ         LDA  STOREA1
               INY
MAXN           PHA
               AND  #$E0
               ASL
               ROL
               ROL
               ROL
               TAX             ;Use as indx
               LDA  BITMSK,X
               BIT  MEMWID
               JMP  SETREAD    ;____
CONFIRM        ADC  #$13       ;    |
               BCC  HINOT      ;    |
               CLC             ;    |
               INC  CHRTBLBH   ;    |_ Use leap index to establish
HINOT          ADC  CHRTBLBL   ;    |  base address of definitions sec
               STA  CHRTBLBL   ;    |
               BCC  HIAINT     ;    |
               INC  CHRTBLBH   ;____|
HIAINT         LDX  ZPG2       ;Def type
               LDY  #0
               STY  ZPG2
               LDA  ZPG1       ;char index
               ASL             ; x2
               ROL  ZPG2
               CPX  #3         ;lookit deftype
               BCC  BYTHRE
               ASL             ; \_
               ROL  ZPG2       ; /  x4
               BPL  ADDEM      ;always taken
BYTHRE         ADC  ZPG1       ; x3
               BCC  ADDEM
               INC  ZPG2
               CLC
ADDEM          ADC  CHRTBLBL
               STA  CHRTBLBL
               LDA  ZPG2
               ADC  CHRTBLBH
               STA  CHRTBLBH   ;---Addressing finished
               LDA  INVERTO
               STA  ZPG1
               LDA  UNDRSCR
               STA  ZPG2
               LDY  #3
               BIT  MEMWID
               JSR  LOAD
                               ;CHARACTER BLASTING NOOSE.
               LDA  #7
               STA  ZPG1
               LDY  INDEX
BITX           LDA  ORBIT
               STA  ZPG2
               LDX  #3
               BIT  MARWID
               BPL  NOSHARE
               INY
               LDA  (GRPHL),Y
               AND  ANDNYB1
               JMP  ADBIT
SHIFT          LSR  ZPG2
               BCC  ADBIT
               STA  (GRPHL),Y
               DEY
               LDA  #$40
               STA  ZPG2
NOSHARE        LDA  (GRPHL),Y
               AND  ANDNYB
ADBIT          LSR  WORK,X
               BCC  COUNT
               ORA  ZPG2
COUNT          DEX
               BPL  SHIFT
               STA  (GRPHL),Y
               CLC
               JSR  ADD1K
               DEC  ZPG1
               BPL  BITX
               JSR  SUB8K
               LDA  STOREA1
               LDY  TXTNDX
               STA  (XBASL),Y  ;Store char on text screen.
               BIT  WRITBSR1
               BIT  WRITBSR1
               PLA
               STA  INVERTO
               BIT  BIND       ;Exit to external?
               BMI  EXT        ;=> yes
               RTS
EXT            JMP  IOREST
                               ;     NON PRINTED CHARACTER EXIT
NOTCHR         BIT  WRITBSR1
               BIT  WRITBSR1
               PLA
               STA  INVERTO
               BIT  BIND       ;Is BLSTCHR caller external?
               BPL  INTRNL     ;=> no, caller is internal.
               JMP  IOREST     ;Do external exit.
INTRNL         SEC             ; \   Tell internal interface
               ROR  BIND       ;  |- that the character was not
               RTS             ; /   printed & exit.
                               ;SET UP ENVIRONMENT
ENVIRON        LDA  $20
               CLC
               ADC  $24
               PHA
               JSR  INDECES
               LDA  ORTBL,X
               STA  ORBIT
               LDA  ANDTBL,X
               STA  ANDNYB
               EOR  #$7F
               STA  EORNYB
               TXA
               LSR
               BCC  ADDNDX
               TAX
               LDA  ANDTBL1,X
               STA  ANDNYB1
               EOR  #$7F
               STA  EORNYB1
               TXA
ADDNDX         ROR  MARWID
               CLC
               ADC  INDEX
               STA  INDEX
               LDY  #0         ;"Conditionally init. textbase"
               LDA  $25
               CMP  LASTV
               BEQ  HORIZ
               STA  LASTV
               JSR  BASCALC
               STA  GRPHL
               LDA  BASH
               CLC
               ADC  PAGE
               STA  GRPHH
               LDY  #1         ;"Uncond. init. textbase"
HORIZ          PLA
HZ1            TAX
               SEC
               SBC  #$28
               ROR  TXTWID
               BMI  EXTRA
               STX  TXTNDX
               TYA
               BNE  OUTIT
               BIT  TXTWID
               BVC  EGGIT
OUTIT          LDA  $25
               JSR  BASCALC
               STA  XBASL
               LDA  BASH
               STA  XBASH
EGGIT          RTS
EXTRA          CMP  #$1E
               BCC  STEX
               LDA  #$1D
STEX           STA  TXTNDX
               TYA
               BNE  OWTIT
               BIT  TXTWID
               BVS  EGGIT
OWTIT          LDA  $25
               JMP  EXBAS
                               ;Calculate horizontal indeces
INDECES        LDY  #$FF
               SEC
SUB7           INY
               SBC  #7
               BCS  SUB7
               ADC  #7
               TAX
               TYA
               ASL
               ASL
               STA  INDEX
               RTS
                               ;CALCULATE EXTRA 30 COLS. BASE
EXBAS          STA  ZPG1
               LDA  #0
               STA  XBASL
               LDX  #4
MOLT           LSR  ZPG1
               BCC  SPIN
               CLC
               ADC  #$1E
SPIN           ROR
               ROR  XBASL
               DEX
               BPL  MOLT
               ROR
               ROR  XBASL
               ROR
               ROR  XBASL
               ROR
               ROR  XBASL
               ORA  #8
               STA  XBASH
               RTS
                               ;INPUT ENTRY PT.
CEYIN1         STA  (BASL),Y   ;Shut off possible cursor on text scr.
               JSR  IOSAVE
BUGIN          JSR  ENVIRON
               LDY  TXTNDX     ; \_
               LDA  (XBASL),Y  ; /  Get screen char
               STA  STOREA     ; & save it
               JSR  KEYPRESS   ;Get key value from keybored
               STA  STOREA1    ;Save it
               TSX
               LDA  $108,X     ; \_
               CMP  GTLNCHK+1  ; /  h. b. GETLN?
               BNE  XKEYIN2
               LDA  $107,X     ; \_
               CMP  GTLNCHK    ; /  l. b. GETLN?
               BNE  XKEYIN2
               LDA  STOREA1
               CMP  #$95       ;CTRL-U?
               BNE  ESK        ;=> = no
               JMP  IOREST     ;Exit loading accum from STOREA
ESK            CMP  #$9B       ;ESCAPE?.
               BNE  UPWARD     ;=> no
               JSR  ESCHNDL
               JMP  BUGIN
UPWARD         CMP  #$8D       ;Carriage return?
               BNE  XKEYIN1    ;=> no
               JSR  ESCE       ;Yes, clear to end of line.
               TSX             ;-\
               LDA  GTLNCHK+3  ; | Get around
               STA  $108,X     ; |-CLREOL call
               LDA  GTLNCHK+2  ; | in ROM GETLN
               STA  $107,X     ;-/
               LDA  #$8D
               LDX  $EB        ;\_
               STA  $200,X     ;/  Place in buffer
XKEYIN1        JMP  XYREST
XKEYIN2        LDA  STOREA1
               BMI  XKEYIN1
                               ;Use keyboard input vector
KEYPRESS       JMP  (KEYPRVEC) ;Dittoe
                               ;Main keyboard input routine
STDKEPRS       JSR  CELLREV    ;Reverse char bit pattern.
               JSR  CYCLE      ;Check kbrd w/delay & alter RND seed
               BMI  KEYPR      ;=> key pressed
               JSR  CELLREV    ;Reverse to normal
               JSR  CYCLE
               BPL  KEYPRESS   ;=> no key pressed
               BMI  KEYPR1     ;Get around reversal
KEYPR          JSR  CELLREV    ; (Normal)
KEYPR1         LDA  $C000      ;Get key value
               BIT  $C010      ;Turn off AKD flag
               RTS
                               ;Delay/keyboard check subrtn.
CYCLE          LDX  DLYLPCNT   ;Get outer loop delay val (default = 0)
INKRND         INC  $4E
               BNE  CHKKBD
               INC  $4F
CHKKBD         BIT  $C000      ;Key pressed?
               BMI  OUTCYCL    ;=> yes
               LDA  DLYVAL     ;Get inner delay (default = $0F)
               JSR  WAIT       ;Call ROM delay subrtn
               DEX             ;End of outer loop?
               BNE  INKRND     ;=> no
OUTCYCL        RTS
                               ;Bit pattern reversal subrtn
CELLREV        LDX  #7
               LDY  INDEX
               CLC
REVNYB         BIT  MARWID
               BPL  NOSPLIT
               INY
               LDA  (GRPHL),Y
               EOR  EORNYB1
               STA  (GRPHL),Y
               DEY
NOSPLIT        LDA  (GRPHL),Y
               EOR  EORNYB
               STA  (GRPHL),Y
               JSR  ADD1K
               DEX
               BPL  REVNYB
               JMP  SUB8K
                               ;Escape code processing subrtn
NESTED         TXA
               AND  #3         ;Shut off the 2 bit
               TAX
               JSR  FREE
               JSR  ENVIRON
ESCHNDL        JSR  ESCCUR
EXTESCH        LDX  #7
ISNSTD         CMP  NESTFUNC,X ;Is it a nested function?
               BEQ  NESTED     ;=> yes
               DEX             ;End noose?
               BPL  ISNSTD     ;=> noape
               LDX  #$12
ISFREE         CMP  FREFUNC,X  ;Izzit yon 1 shot function?
               BEQ  FREE       ; brantch = yoape
               DEX             ;Cut noose loose?
               BPL  ISFREE     ; burntch = mump
               RTS
FREE           TXA
               ASL
               CMP  #$12       ;Is it a character set #?
               BCS  SETCHGE    ;=> yes
SUBROUTE       TAX
               LDA  FUNCVEC+1,X
               PHA
               LDA  FUNCVEC,X
               PHA
               RTS
                               ;Fulfill keybouard request for charset
SETCHGE        SBC  #$12       ;Convert to direct chrset #
               STA  CHARARG
               RTS             ;Change it
                               ;Use vector for alternate Escape cursor
ESCCUR         JMP  (ESCCURV)  ;Ditto
                               ;Standard escape cursor rtn.
STDESCUR       JSR  EXCHCUR
ESCKEY         BIT  $C000      ;Key pressed?
               BPL  ESCKEY     ;=> no
               JSR  EXCHCUR    ;Yes, turn off Esc cursor
               LDA  $C000      ;Get key val
               BIT  $C010      ;Shut off AKD flag
               RTS
                               ;Screen bytes exchange (for escape cursor)
EXCHCUR        LDA  #7
               STA  ZPG1
               LDY  INDEX
               LDX  #3         ;  ___
FROMTBL        LDA  ESCCURSR,X ;     |
               STA  WORK,X     ;     |_ Load work locs. with
               DEX             ;     |  table pattern.
               BPL  FROMTBL    ;  ___|
BITY           LDX  #3
               LDA  ORBIT
               STA  ZPG2
               BIT  MARWID
               BPL  NOKROS     ;=> no byte sharing
               INY
               LDA  (GRPHL),Y  ;Get adjacent graphics byte
               AND  ANDNYB1
               STA  BIND
               JMP  EXCHBIT
MOOV           LSR  ZPG2
               BCC  EXCHBIT
               LDA  #$40
               STA  ZPG2
               LDA  BIND
               STA  (GRPHL),Y
               DEY
NOKROS         LDA  (GRPHL),Y
               AND  ANDNYB
               STA  BIND
EXCHBIT        LDA  (GRPHL),Y
               AND  ZPG2
               SEC
               BNE  ROAR
               CLC
ROAR           ROR  WORK,X
               LDA  BIND
               BCC  NUNBIT
               ORA  ZPG2
               STA  BIND
NUNBIT         DEX
               BPL  MOOV
               STA  (GRPHL),Y
               CLC
               JSR  ADD1K
               DEC  ZPG1
               BPL  BITY
               LDX  #3         ;  ___
FROMWRK        LDA  WORK,X     ;     |
               STA  ESCCURSR,X ;     |_ Transfer work loc.
               DEX             ;     |  contents to table.
               BPL  FROMWRK    ;  ___|
               LDA  GRPHH
SUB8K          SEC
               SBC  #$20
               STA  GRPHH
               RTS
                               ;Subroutine to add 1K to grphics scrn base addr
ADD1K          LDA  GRPHH
               ADC  #4
               STA  GRPHH
               RTS
                               ;Switch to/from printer or screen program output
OUTDEV         LDX  #<VECTOUT
               LDY  #>VECTOUT
               LDA  PS
               BMI  TOSCRN     ;=> "Now printer, change to screen"
               LDX  #<TBLIOVEC
               LDY  #>TBLIOVEC
TOSCRN         EOR  #$80
               STA  PS
               STX  GRPHL
               STY  GRPHH
               LDY  #$36
               LDX  #0
               LDA  $BF00
               CMP  #$4C
               BNE  THREEP3    ;=> Not ProDOS
               LDY  #$30       ;Lo byte ProDOS BI global pg loc
               LDX  #$BE       ;Hi byte ""
THREEP3        STY  CHRTBLBL
               STX  CHRTBLBH
               LDY  #3
INITIO         LDA  (GRPHL),Y
               STA  (CHRTBLBL),Y
               DEY
               BPL  INITIO
               TXA
               BNE  DOSXIT
               JMP  $3EA
DOSXIT         RTS
                               ;Escape @ clear entire text window
ESC@           LDA  $22
               JSR  ESCF@
               LDA  #0
               STA  $24
               LDA  $22
               JMP  SETLYNE
                               ;Escape F subroutine
ESCF           JSR  ESCE
               LDY  $25
               INY
               TYA
                               ;Escape F, @ common subroutine
ESCF@          CMP  $23        ;Line # below bottom of window?
               BCS  ANEXIT
               JSR  KLERINT
               LDA  $20
               STA  BASL
               LDA  $21
               STA  BASH
               JSR  SCRLINIT
               LDA  CHRTBLBL
               STA  LINSTRS
               JMP  THICKET
LINELOOP       CMP  $23
               BCC  WIPEOUT
               JMP  NEWBAS
WIPEOUT        JSR  BASCALC
               ADC  ZPG1
               STA  LINSTRS
               STA  CHRTBLBL   ;(margins)
               LDA  BASL
               ADC  $20
               STA  SLTEXT
               LDA  BASH
               STA  SHTEXT
               ADC  PAGE
               STA  HINSTRS
               LDA  ALTEXT
               ADC  #$1E
               BCC  NONK
               INC  AHTEXT
NONK           STA  ALTEXT
THICKET        JSR  BLAK
               INC  GRPHH
               LDA  GRPHH
               BPL  LINELOOP
                               ;Base init for ESCF,E
KLERINT        STA  GRPHH
               JSR  BASCALC
               STA  SLTEXT
               STA  CHRTBLBL
               LDA  BASH
               STA  SHTEXT
               CLC
               ADC  PAGE
               STA  HINSTRS
               LDA  GRPHH
               JSR  EXBAS
               STA  AHTEXT
               LDA  XBASL
               STA  ALTEXT
ANEXIT         RTS
                               ;Escape E subroutine
ESCE           LDA  $25
               JSR  KLERINT
               LDA  $21
               SEC
               SBC  $24
               STA  BASH       ;width
               LDA  $20
               CLC
               ADC  $24
               STA  BASL       ;Left mar.
               JSR  SCRLINIT
               LDA  CHRTBLBL
               STA  LINSTRS
               JSR  BLAK
               JMP  NEWBAS
                               ;External ESC@ interface handler
EXTESC@        JSR  IOSAVE
               JSR  ESC@
               JMP  SWREST
                               ;External char cell reverse interface handler
EXTCELRV       JSR  IOSAVE
               JSR  ENVIRON
               JSR  CELLREV
               JMP  SWREST
                               ;External escape code interface handler
EXTESC         JSR  IOSAVE
               JSR  ENVIRON
               LDA  STOREA
               JSR  EXTESCH
               JMP  IOREST
                               ;Retrieve char. from screen (X=line, Y=col.)
SCRNCHR        JSR  IOSAVE
               LDA  XBASL
               LDY  XBASH
               STA  ZPG1
               STY  ZPG2
               LDA  $25
               STA  RMS
               LDA  $EB
               STA  $25
               LDA  $35        ;Requested Col.
               JSR  HZ1
               LDY  TXTNDX
               LDA  (XBASL),Y
               LDX  RMS
               STX  $25
               LDX  ZPG1
               LDY  ZPG2
               STX  XBASL
               STY  XBASH
               JMP  XYREST
                               ;+++DATA TABLES+++
                               ;For Escape codes
NESTFUNC       HEX  CACDCBC9888A958B ;J,M,K,I,<-,down,->,^
FREFUNC        HEX  C2C3C1C4C5C6C0   ;B,C,A,D,E,F,@
               HEX  A0DFB0B1B2B3B4B5 ;space,_,0,1,2,3
               HEX  B6B7B8B9         ;6,7,8,9
FUNCVEC        DFB  <LEFT-1
               DFB  >LEFT-1
               DFB  <LINEFEED-1
               DFB  >LINEFEED-1
               DFB  <RIGHT-1
               DFB  >RIGHT-1
               DFB  <UP-1
               DFB  >UP-1
               DFB  <ESCE-1
               DFB  >ESCE-1
               DFB  <ESCF-1
               DFB  >ESCF-1
               DFB  <ESC@-1
               DFB  >ESC@-1
               DFB  <SCOROFF-1
               DFB  >SCOROFF-1
               DFB  <SCORON-1
               DFB  >SCORON-1
                               ;Stuff for EVF ctrl codes
               DFB  <DNSCRL-1
               DFB  >DNSCRL-1
               DFB  <UPSCRL-1
               DFB  >UPSCRL-1
               DFB  <HOUSE-1
               DFB  >HOUSE-1
               DFB  <ENTLN-1
               DFB  >ENTLN-1
               DFB  <EVFON-1
               DFB  >EVFON-1
                               ;For EVF only
               DFB  <EVFOFF-1
               DFB  >EVFOFF-1
               DFB  <MAUSON-1
               DFB  >MAUSON-1
               DFB  <MAUSOFF-1
               DFB  >MAUSOFF-1
               DFB  <INVOFF-1
               DFB  >INVOFF-1
               DFB  <INVON-1
               DFB  >INVON-1
               DFB  <IKSKAPE-1
               DFB  >IKSKAPE-1
                               ;Matching coades
EVFTBL         HEX  9C9F9D8B8C9697999A92                               ;Used always
               HEX  959B988E8F90 ;Last one is EVF's Escape (DLE)
                               ;For ENVIRON
ANDTBL         HEX  700F611F433F07
ORTBL          HEX  08011002200440
ANDTBL1        HEX  7E7C78
LDRSMSK        HEX  0F011F033F071E3C
LSRDMSK        HEX  707E607C40786143
BITMSK         HEX  01020408102040800102
                               ;IMIDGE UV GLOWBALL VEKTIR TAYBULL
VECTBL         DFB  <LATNTXT   ;\_
               DFB  >LATNTXT   ;/  0
               DFB  <LATNTXT   ;\_
               DFB  >LATNTXT   ;/  1
               DFB  <LATNTXT   ;\_
               DFB  >LATNTXT   ;/  2
               DFB  <LATNTXT   ;\_
               DFB  >LATNTXT   ;/  3
               DFB  <LATNTXT   ;\_
               DFB  >LATNTXT   ;/  4
               DFB  <LATNTXT   ;\_
               DFB  >LATNTXT   ;/  5
               DFB  <LATNTXT   ;\_
               DFB  >LATNTXT   ;/  6
               DFB  <LATNTXT   ;\_
               DFB  >LATNTXT   ;/  7
               DFB  <LATNTXT   ;\_
               DFB  >LATNTXT   ;/  8
               DFB  <LATNTXT   ;\_
               DFB  >LATNTXT   ;/  9
                               ;
               HEX  0000       ;Wheremem
                               ;
               HEX  00         ;Chararg
               DFB  <FREMEM
               DFB  >FREMEM
               HEX  02         ;ID
                               ;
               HEX  DF87F0FD00000000 ;Escape cursor pattern
                               ;
               DFB  <STDESCUR  ; \_
               DFB  >STDESCUR  ; /  Vector to standard escape input rtn.
                               ;
               JMP  EXTESC     ;External user interface -> esc code processing
                               ;
               HEX  00001C77FD8DFD ;Inv, _ Pg, GETLN ret addr, GETLN skip
               HEX  DDFB       ;Vector to BEL1
                               ;
               DFB  <STDKEPRS  ; \_
               DFB  >STDKEPRS  ; /  Vector to standard keyboard input rtn.
                               ;
VECTOUT        DFB  <KOUT2     ; \_
               DFB  >KOUT2     ; /  Image of system entry pt. for output
                               ;
               DFB  <CEYIN1    ; \_
               DFB  >CEYIN1    ; /  Image of system entry pt. for input
                               ;
               HEX  0F00       ;Delay values for CYCLE subrtn. (STDKEPRS)
               JMP  CYCLE
               JMP  SCRNCHR
               JMP  EXTCELRV
               JMP  ENVIRON
               JMP  BOOTUP
               JMP  BLSTCHR
               JMP  OUTDEV
               JMP  EXTESC@

* THE CHARACTER SET! *

LATNTXT        HEX  02         ;Def type (# bytes -1)
               HEX  E0         ;Sections used
               HEX  00000000   ;1st half \_
               HEX  00002040   ;2nd half /  Sec base offsets
               HEX  FFFFFFFF   ;1st half \_
               HEX  FF1F1F1F   ;2nd half /  Sec indeces
                               ;     Comparison table
               HEX  A0A1A2A3A4A5A6A7
               HEX  A8A9AAABACADAEAF
               HEX  B0B1B2B3B4B5B6B7 ;Section 5
               HEX  B8B9BABBBCBDBEBF
                               ;
               HEX  C0C1C2C3C4C5C6C7
               HEX  C8C9CACBCCCDCECF
               HEX  D0D1D2D3D4D5D6D7 ;Section 6
               HEX  D8D9DADBDCDDDEDF
                               ;
               HEX  E0E1E2E3E4E5E6E7
               HEX  E8E9EAEBECEDEEEF
               HEX  F0F1F2F3F4F5F6F7 ;Section 7
               HEX  F8F9FAFBFCFDFEFF
                               ;       DEFINITIONS
               HEX  000000     ;space
               HEX  005F00     ;!
               HEX  070007     ;"
               HEX  3E143E     ;#
               HEX  2C7F1A     ;$
               HEX  330866     ;%
               HEX  3A5572     ;&
               HEX  000700     ;'
               HEX  1C2241     ;(
               HEX  41221C     ;)
               HEX  367F36     ;*
               HEX  081C08     ;+
               HEX  403000     ;,
               HEX  080808     ;-
               HEX  004000     ;.
               HEX  300806     ;/
               HEX  3E5D3E     ;0
               HEX  427F40     ;1
               HEX  625946     ;2
               HEX  21453B     ;3
               HEX  18167F     ;4
               HEX  274539     ;5
               HEX  3E4932     ;6
               HEX  710D03     ;7
               HEX  364936     ;8
               HEX  26493E     ;9
               HEX  001400     ;:
               HEX  403400     ;;
               HEX  081422     ;<
               HEX  141414     ;=
               HEX  221408     ;>
               HEX  025906     ;?
               HEX  3E594E     ;@
               HEX  7E117E     ;A
               HEX  7F4936     ;B
               HEX  3E4122     ;C
               HEX  7F413E     ;D
               HEX  7F4941     ;E
               HEX  7F0901     ;F
               HEX  3E5132     ;G
               HEX  7F087F     ;H
               HEX  417F41     ;I
               HEX  30403F     ;J
               HEX  7F1463     ;K
               HEX  7F4040     ;L
               HEX  7F067F     ;M
               HEX  7F1C7F     ;N
               HEX  3E413E     ;O
               HEX  7F0906     ;P
               HEX  3E61FE     ;Q
               HEX  7F1966     ;R
               HEX  264932     ;S
               HEX  017F01     ;T
               HEX  3F403F     ;U
               HEX  1F601F     ;V
               HEX  7F307F     ;W
               HEX  631C63     ;X
               HEX  077807     ;Y
               HEX  714947     ;Z
               HEX  7F7F41     ;[
               HEX  060830     ;\
               HEX  417F7F     ;]
               HEX  020102     ;^
               HEX  808080     ;_
               HEX  010204     ;`
               HEX  205478     ;a
               HEX  7F4438     ;b
               HEX  384444     ;c
               HEX  38447F     ;d
               HEX  385458     ;e
               HEX  7E0902     ;f
               HEX  98A478     ;g
               HEX  7F0478     ;h
               HEX  447D40     ;i
               HEX  40847D     ;j
               HEX  7F2844     ;k
               HEX  417F40     ;l
               HEX  7C1C78     ;m
               HEX  7C0478     ;n
               HEX  384438     ;o
               HEX  FC2418     ;p
               HEX  1824FC     ;q
               HEX  7C0804     ;r
               HEX  585434     ;s
               HEX  3F4420     ;t
               HEX  3C407C     ;u
               HEX  1C601C     ;v
               HEX  7C307C     ;w
               HEX  6C106C     ;x
               HEX  9CA07C     ;y
               HEX  64544C     ;z
               HEX  083641     ;{
               HEX  00FF00     ;|
               HEX  413608     ;}
               HEX  030206     ;~
               HEX  552A55     ;
                               ;D000 relocated code
FREMEM         BPL  MAYN
               STA  RAMRDON
MAYN           LDA  (WORK),Y
               STA  ZPG2       ;Def type
               STA  RAMRDOFF
               JMP  GOTSIZ     ;Exit BSR
               BPL  MAZN
               STA  RAMRDON
MAZN           AND  (WORK),Y   ;Any defs in section?
               BEQ  NODEFS
               TXA
               TAY
               INY
               INY
               LDA  (WORK),Y   ;Sec base offset
               STA  ZPG1       ;Save it
               CLC             ;---
               ADC  #$12       ;   |
               ADC  WORK       ;   |_
               STA  WORK       ;   |  Address base of sec in comp tbl
               BCC  SAMEPG     ;   |
               INC  RMD        ;___|
               CLC
SAMEPG         TYA
               ADC  #8
               TAY
               LDA  (CHRTBLBL),Y ;Get sec index
               TAY
               PLA
               PHA
LAUQE          CMP  (WORK),Y
               BEQ  DEFD
               DEY
               BPL  LAUQE
NODEFS         PLA
               STA  RAMRDOFF
               BPL  ABNORMAL
               JMP  NOTCHR     ;Char not in set
ABNORMAL       JMP  RESORT     ;-Let's try that search again
                               ;SUCCESSFUL SEARCH
DEFD           TYA
               CLC
               ADC  ZPG1       ;Char index
               STA  ZPG1
               PLA
               LDY  #9
               LDA  (CHRTBLBL),Y
               LDY  #$11
               ADC  (CHRTBLBL),Y ;Leap index
               STA  RAMRDOFF
               JMP  CONFIRM
                               ;Work loading
               BPL  AWKS
               STA  RAMRDON
AWKS           LDA  #0
               CPX  #2
               BEQ  EITHER
LODE           LDA  (CHRTBLBL),Y
EITHER         ORA  ZPG2
               EOR  ZPG1
               STA  WORK,Y
               DEY
               BPL  LODE
               STA  RAMRDOFF
               RTS
