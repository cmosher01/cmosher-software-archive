/* Generated By:JavaCC: Do not edit this line. GedcomDateValueParser.java */
package nu.mine.mosher.gedcom.date.parser;

import nu.mine.mosher.grodb.YMD;
import nu.mine.mosher.grodb.DateRange;
import nu.mine.mosher.grodb.DatePeriod;

import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;

class GedcomDateValueParser implements GedcomDateValueParserConstants {
        private DatePeriod period;
        private String notes = "";

        private static class CalYMD
        {
                private final YMD ymd;
                private final boolean julian;
                CalYMD(final YMD ymd, final boolean julian)
                {
                        this.ymd = ymd;
                        this.julian = julian;
                }
                YMD getYMD() { return this.ymd; }
                boolean isJulian() { return this.julian; }
        }
        private static class DateWithNotes
        {
                private final CalYMD date;
                private final String notes;
                DateWithNotes(final CalYMD date, final String notes)
                {
                        this.date = date;
                        this.notes = notes;
                }
                CalYMD getCalYMD() { return this.date; }
                String getNotes() { return this.notes; }
        }

        public void parse() throws ParseException
        {
                DateValue();
        }

        public DatePeriod getPeriod()
        {
                return this.period;
        }

        public String getNotes()
        {
                return this.notes;
        }

/**
 * Top-level entity, the date value from Gedcom.
 */
  final public void DateValue() throws ParseException {
        DatePeriod datePeriod = null;
        DateRange dateRange = null;
        DateWithNotes dateNotes = null;
        String sNotes = null;
        CalYMD date = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FROM:
    case TO:
      datePeriod = DatePeriod();
      break;
    case BEFORE:
    case AFTER:
    case BETWEEN:
      dateRange = DateRange();
      break;
    case ABOUT:
    case CALCULATED:
    case ESTIMATED:
      datePeriod = DateApproximated();
      break;
    case INTERPRETED:
      dateNotes = DateInterpreted();
      break;
    case LPAREN:
      sNotes = DatePhrase();
      break;
    case JAN:
    case FEB:
    case MAR:
    case APR:
    case MAY:
    case JUN:
    case JUL:
    case AUG:
    case SEP:
    case OCT:
    case NOV:
    case DEC:
    case NUMBER:
    case AT:
      date = Date();
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(0);
                if (datePeriod != null)
                {
                        this.period = datePeriod;
                }
                if (dateRange != null)
                {
                        this.period = new DatePeriod(dateRange,dateRange);
                }
                if (dateNotes != null)
                {
                        this.notes = dateNotes.getNotes();
                        this.period = new DatePeriod(
                                new DateRange(dateNotes.getCalYMD().getYMD(),dateNotes.getCalYMD().getYMD(),dateNotes.getCalYMD().isJulian(),false),
                                new DateRange(dateNotes.getCalYMD().getYMD(),dateNotes.getCalYMD().getYMD(),dateNotes.getCalYMD().isJulian(),false));
                }
                if (sNotes != null)
                {
                        this.notes = sNotes;
                }
                if (date != null)
                {
                        this.period = new DatePeriod(
                                new DateRange(date.getYMD(),date.getYMD(),date.isJulian(),true),
                                new DateRange(date.getYMD(),date.getYMD(),date.isJulian(),true));
                }
  }

  final public DateRange DateRange() throws ParseException {
        CalYMD earliest = null;
        CalYMD latest = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AFTER:
      jj_consume_token(AFTER);
      earliest = Date();
      break;
    case BEFORE:
      jj_consume_token(BEFORE);
      latest = Date();
      break;
    case BETWEEN:
      jj_consume_token(BETWEEN);
      earliest = Date();
      jj_consume_token(AND);
      latest = Date();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                boolean julian;
                if (earliest == null)
                {
                        julian = latest.isJulian();
                        earliest = new CalYMD(YMD.getMinimum(),julian);
                }
                if (latest == null)
                {
                        julian = earliest.isJulian();
                        latest = new CalYMD(YMD.getMaximum(),julian);
                }
                julian = earliest.isJulian();
                {if (true) return new DateRange(earliest.getYMD(),latest.getYMD(),julian,false);}
    throw new Error("Missing return statement in function");
  }

  final public DatePeriod DateApproximated() throws ParseException {
        CalYMD date;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABOUT:
      jj_consume_token(ABOUT);
      date = Date();
      break;
    case CALCULATED:
      jj_consume_token(CALCULATED);
      date = Date();
      break;
    case ESTIMATED:
      jj_consume_token(ESTIMATED);
      date = Date();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return new DatePeriod(
                        new DateRange(date.getYMD(),date.getYMD(),date.isJulian(),true),
                        new DateRange(date.getYMD(),date.getYMD(),date.isJulian(),true));}
    throw new Error("Missing return statement in function");
  }

  final public DateWithNotes DateInterpreted() throws ParseException {
        CalYMD date;
        String notes;
    jj_consume_token(INTERPRETED);
    date = Date();
    notes = DatePhrase();
                {if (true) return new DateWithNotes(date,notes);}
    throw new Error("Missing return statement in function");
  }

  final public String DatePhrase() throws ParseException {
        Token text;
    jj_consume_token(LPAREN);
    text = jj_consume_token(RAWTEXT);
    jj_consume_token(RPAREN);
                {if (true) return text.image;}
    throw new Error("Missing return statement in function");
  }

  final public DatePeriod DatePeriod() throws ParseException {
        CalYMD fromDate = null;
        CalYMD toDate = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FROM:
      jj_consume_token(FROM);
      fromDate = Date();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TO:
        jj_consume_token(TO);
        toDate = Date();
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      break;
    case TO:
      jj_consume_token(TO);
      toDate = Date();
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                boolean julian;
                if (fromDate == null)
                {
                        julian = toDate.isJulian();
                        fromDate = new CalYMD(YMD.getMinimum(),julian);
                }
                if (toDate == null)
                {
                        julian = fromDate.isJulian();
                        toDate = new CalYMD(YMD.getMaximum(),julian);
                }
                julian = fromDate.isJulian();
                {if (true) return new DatePeriod(
                        new DateRange(fromDate.getYMD(),fromDate.getYMD(),julian,false),
                        new DateRange(toDate.getYMD(),toDate.getYMD(),julian,false));}
    throw new Error("Missing return statement in function");
  }

  final public CalYMD Date() throws ParseException {
        boolean julian = false;
        YMD ymd;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AT:
      julian = DateCalendarEscape();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    ymd = DateCalendar();
        YMD ymdGreg;
        if (julian)
        {
                // convert julian date to gregorian
                final GregorianCalendar cal = new GregorianCalendar();
                cal.setGregorianChange(new Date(Long.MAX_VALUE));
                cal.set(ymd.getYear(),ymd.getMonth()-1,ymd.getDay());
                cal.setGregorianChange(new Date(Long.MIN_VALUE));
                ymdGreg = new YMD(cal.get(Calendar.YEAR),cal.get(Calendar.MONTH)+1,cal.get(Calendar.DAY_OF_MONTH));
        }
        else
        {
                ymdGreg = ymd;
        }
                {if (true) return new CalYMD(ymdGreg,julian);}
    throw new Error("Missing return statement in function");
  }

  final public boolean DateCalendarEscape() throws ParseException {
        Token cal;
    jj_consume_token(AT);
    jj_consume_token(CALENDAR_ESC);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GREGORIAN:
      cal = jj_consume_token(GREGORIAN);
      break;
    case JULIAN:
      cal = jj_consume_token(JULIAN);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(AT);
                {if (true) return cal.kind == JULIAN;}
    throw new Error("Missing return statement in function");
  }

  final public YMD DateCalendar() throws ParseException {
        int year = 0;
        int month = 0;
        int day = 0;
    if (jj_2_1(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
        day = Day();
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      month = Month();
    } else {
      ;
    }
    year = Year();
                {if (true) return new YMD(year,month,day);}
    throw new Error("Missing return statement in function");
  }

  final public int Day() throws ParseException {
    jj_consume_token(NUMBER);
                {if (true) return Integer.parseInt(this.token.image);}
    throw new Error("Missing return statement in function");
  }

  final public int Month() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case JAN:
      jj_consume_token(JAN);
      break;
    case FEB:
      jj_consume_token(FEB);
      break;
    case MAR:
      jj_consume_token(MAR);
      break;
    case APR:
      jj_consume_token(APR);
      break;
    case MAY:
      jj_consume_token(MAY);
      break;
    case JUN:
      jj_consume_token(JUN);
      break;
    case JUL:
      jj_consume_token(JUL);
      break;
    case AUG:
      jj_consume_token(AUG);
      break;
    case SEP:
      jj_consume_token(SEP);
      break;
    case OCT:
      jj_consume_token(OCT);
      break;
    case NOV:
      jj_consume_token(NOV);
      break;
    case DEC:
      jj_consume_token(DEC);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return this.token.kind - MONTH_LOWER_LIMIT;}
    throw new Error("Missing return statement in function");
  }

  final public int Year() throws ParseException {
        Token year;
        boolean gregorian = false;
        boolean bc = false;
    year = jj_consume_token(NUMBER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SLASH:
      gregorian = SlashYear();
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    if (jj_2_2(2)) {
      bc = BC();
    } else {
      ;
    }
                int y = Integer.parseInt(year.image);
                if (gregorian)
                {
                        ++y;
                }
                if (bc)
                {
                        y = -y;
                }
                if (y == 0)
                {
                        {if (true) throw new ParseException("year cannot be zero.");}
                }
                {if (true) return y;}
    throw new Error("Missing return statement in function");
  }

  final public boolean SlashYear() throws ParseException {
    jj_consume_token(SLASH);
    jj_consume_token(NUMBER);
                {if (true) return true;}
    throw new Error("Missing return statement in function");
  }

  final public boolean BC() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    jj_consume_token(BC);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RPAREN:
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
                {if (true) return true;}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_3R_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_4() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1()) jj_scanpos = xsp;
    if (jj_3R_2()) return true;
    return false;
  }

  final private boolean jj_3R_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(30)) jj_scanpos = xsp;
    if (jj_scan_token(BC)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_3()) return true;
    return false;
  }

  final private boolean jj_3R_1() {
    if (jj_3R_4()) return true;
    return false;
  }

  public GedcomDateValueParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[12];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x4fff7be0,0x380,0x3800,0x40,0x60,0x0,0x30000000,0x0,0xfff0000,0x0,0x40000000,0x80000000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x5,0x0,0x0,0x0,0x0,0x4,0x0,0x1,0x0,0x2,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public GedcomDateValueParser(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GedcomDateValueParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public GedcomDateValueParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GedcomDateValueParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public GedcomDateValueParser(GedcomDateValueParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(GedcomDateValueParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[38];
    for (int i = 0; i < 38; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 12; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 38; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
