options
{
	IGNORE_CASE = true;
	STATIC = false;
}



PARSER_BEGIN(GedcomDateValueParser)

package nu.mine.mosher.gedcom.date.parser;

class GedcomDateValueParser
{
}

PARSER_END(GedcomDateValueParser)



SKIP :
{
	" " | "\t" | "\n" | "\r"
}

TOKEN :
{
	< FROM:        "FROM" > |
	< TO:          "TO"   > |
	< BEFORE:      "BEF"  > |
	< AFTER:       "AFT"  > |
	< BETWEEN:     "BET"  > |
	< AND:         "AND"  > |
	< ABOUT:       "ABT"  > |
	< CALCULATED:  "CAL"  > |
	< ESTIMATED:   "EST"  > |
	< INTERPRETED: "INT"  >
}

TOKEN :
{
	< MONTH:
		"JAN" | "FEB" | "MAR" | "APR" | "MAY" | "JUN" |
		"JUL" | "AUG" | "SEP" | "OCT" | "NOV" | "DEC" >
}

TOKEN :
{
	< CALENDAR:  "GREGORIAN" | "JULIAN" >
}

TOKEN :
{
	< LPAREN:  "(" > |
	< RPAREN:  ")" > |
	< NUMBER:  (["0"-"9"])+ > |
	< SLASH:   "/" > |
	< AT:      "@" > |
	< RAWTEXT: ~[")"] >
}

TOKEN :
{
	< BC: "BC" | "B.C." > |
	< CALENDAR_ESC: "#D" >
}

void DateValue() : {}
{
	(
		DatePeriod() |
		DateRange() |
		DateApproximated() |
		DateInterpreted() |
		DatePhrase() |
		Date()
	)

	<EOF>
}

void DateRange() : {}
{
	<BEFORE> Date() | <AFTER> Date() | <BETWEEN> Date() <AND> Date()
}

void DateApproximated() : {}
{
	<ABOUT> Date() | <CALCULATED> Date() | <ESTIMATED> Date()
}

void DateInterpreted() : {}
{
	<INTERPRETED> Date() DatePhrase()
}

void DatePhrase() : {}
{
	<LPAREN> <RAWTEXT> <RPAREN>
}

void DatePeriod() : {}
{
	<FROM> Date() [ <TO> Date() ] |
	<TO> Date()
}

void Date() : {}
{
	[ DateCalendarEscape() ] DateCalendar()
}

void DateCalendarEscape() : {}
{
	<AT> <CALENDAR_ESC> <CALENDAR> <AT>
}

void DateCalendar() : {}
{
	[ LOOKAHEAD(2) [ Day() ] Month() ] Year()
}

int Day() : {}
{
	<NUMBER>
	{
		return Integer.parseInt(this.token.image);
	}
}

void Month() : {}
{
	<MONTH>
}

void Year() : {}
{
	<NUMBER> [ SlashYear() ] [ LOOKAHEAD(2) BC() ]
}

void SlashYear() : {}
{
	<SLASH> <NUMBER>
}

void BC() : {}
{
	[ <LPAREN> ] <BC> [ <RPAREN> ]
}
