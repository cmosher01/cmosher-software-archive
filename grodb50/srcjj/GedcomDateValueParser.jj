/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. GedcomDateValueParser.jj */
/*@egen*/options
{
  IGNORE_CASE = true;
}

PARSER_BEGIN(GedcomDateValueParser)

class GedcomDateValueParser/*@bgen(jjtree)*/implements GedcomDateValueParserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTGedcomDateValueParserState jjtree = new JJTGedcomDateValueParserState();

/*@egen*/
	public static void main(String args[]) throws ParseException
	{
		GedcomDateValueParser t = new GedcomDateValueParser(System.in);
		SimpleNode n = t.DateValue();
		n.dump("");
	}
}

PARSER_END(GedcomDateValueParser)


SKIP :
{
  " " | "\t" | "\n" | "\r"
}

TOKEN :
{
	< FROM:        "FROM" > |
	< TO:          "TO"   > |
	< BEFORE:      "BEF"  > |
	< AFTER:       "AFT"  > |
	< BETWEEN:     "BET"  > |
	< AND:         "AND"  > |
	< ABOUT:       "ABT"  > |
	< CALCULATED:  "CAL"  > |
	< ESTIMATED:   "EST"  > |
	< INTERPRETED: "INT"  >
}

TOKEN :
{
	< MONTH:
		"JAN" | "FEB" | "MAR" | "APR" | "MAY" | "JUN" |
		"JUL" | "AUG" | "SEP" | "OCT" | "NOV" | "DEC" >
}

TOKEN :
{
	< CALENDAR:  "GREGORIAN" | "JULIAN" >
}

TOKEN :
{
	< LPAREN:  "(" > |
	< RPAREN:  ")" > |
	< NUMBER:  (["0"-"9"])+ > |
	< SLASH:   "/" > |
	< AT:      "@" >
}

TOKEN :
{
	< BC: "BC" | "B.C." > |
	< CALENDAR_ESC: "#D" >
}

SimpleNode DateValue() : {/*@bgen(jjtree) DateValue */
  SimpleNode jjtn000 = new SimpleNode(JJTDATEVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DateValue */
        try {
/*@egen*/
	(
		DatePeriod() |
		DateRange() |
		DateApproximated() |
		DateInterpreted() |
		DatePhrase() |
		Date()
	)

	<EOF>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void DateRange() : {/*@bgen(jjtree) DateRange */
  SimpleNode jjtn000 = new SimpleNode(JJTDATERANGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DateRange */
        try {
/*@egen*/
	<BEFORE> Date() | <AFTER> Date() | <BETWEEN> Date() <AND> Date()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void DateApproximated() : {/*@bgen(jjtree) DateApproximated */
  SimpleNode jjtn000 = new SimpleNode(JJTDATEAPPROXIMATED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DateApproximated */
        try {
/*@egen*/
	<ABOUT> Date() | <CALCULATED> Date() | <ESTIMATED> Date()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void DateInterpreted() : {/*@bgen(jjtree) DateInterpreted */
  SimpleNode jjtn000 = new SimpleNode(JJTDATEINTERPRETED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DateInterpreted */
        try {
/*@egen*/
	<INTERPRETED> Date() DatePhrase()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void DatePhrase() : {/*@bgen(jjtree) DatePhrase */
  SimpleNode jjtn000 = new SimpleNode(JJTDATEPHRASE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DatePhrase */
        try {
/*@egen*/
	<LPAREN> < ~[")"] > <RPAREN>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void DatePeriod() : {/*@bgen(jjtree) DatePeriod */
  SimpleNode jjtn000 = new SimpleNode(JJTDATEPERIOD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DatePeriod */
        try {
/*@egen*/
	<FROM> Date() [ <TO> Date() ] |
	<TO> Date()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Date() : {/*@bgen(jjtree) Date */
  SimpleNode jjtn000 = new SimpleNode(JJTDATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Date */
        try {
/*@egen*/
	[ DateCalendarEscape() ] DateCalendar()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void DateCalendarEscape() : {/*@bgen(jjtree) DateCalendarEscape */
  SimpleNode jjtn000 = new SimpleNode(JJTDATECALENDARESCAPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DateCalendarEscape */
        try {
/*@egen*/
	<AT> <CALENDAR_ESC> <CALENDAR> <AT>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void DateCalendar() : {/*@bgen(jjtree) DateCalendar */
  SimpleNode jjtn000 = new SimpleNode(JJTDATECALENDAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DateCalendar */
        try {
/*@egen*/
	[ LOOKAHEAD(2) [ Day() ] Month() ] Year()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

int Day() : {/*@bgen(jjtree) Day */
  SimpleNode jjtn000 = new SimpleNode(JJTDAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Day */
        try {
/*@egen*/
	<NUMBER>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return Integer.parseInt(token.image);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Month() : {/*@bgen(jjtree) Month */
  SimpleNode jjtn000 = new SimpleNode(JJTMONTH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Month */
        try {
/*@egen*/
	<MONTH>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Year() : {/*@bgen(jjtree) Year */
  SimpleNode jjtn000 = new SimpleNode(JJTYEAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Year */
        try {
/*@egen*/
	<NUMBER> [ SlashYear() ] [ LOOKAHEAD(2) BC() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SlashYear() : {/*@bgen(jjtree) SlashYear */
  SimpleNode jjtn000 = new SimpleNode(JJTSLASHYEAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SlashYear */
        try {
/*@egen*/
	<SLASH> <NUMBER>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void BC() : {/*@bgen(jjtree) BC */
  SimpleNode jjtn000 = new SimpleNode(JJTBC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BC */
        try {
/*@egen*/
	[ <LPAREN> ] <BC> [ <RPAREN> ]/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
