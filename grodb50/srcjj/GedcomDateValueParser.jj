options
{
	IGNORE_CASE = true;
	STATIC = false;
}



PARSER_BEGIN(GedcomDateValueParser)

package nu.mine.mosher.gedcom.date.parser;

import nu.mine.mosher.grodb.YMD;
import nu.mine.mosher.grodb.DateRange;
import nu.mine.mosher.grodb.DatePeriod;
import nu.mine.mosher.grodb.TimeZoneUnknown;

//import java.util.HashMap;
//import java.util.Map;

class GedcomDateValueParser
{
//	private static final Map mapMonthTokenToInt = new HashMap();
//	private static int nextMonth = 1;
//	public static void addNextMonth(final String month)
//	{
//		mapMonthTokenToInt.put(month,new Integer(nextMonth));
//		++nextMonth;
//	}
	private static class CalYMD
	{
		private final YMD ymd;
		private final boolean julian;
		CalYMD(final YMD ymd, final boolean julian)
		{
			this.ymd = ymd;
			this.julian = julian;
		}
		YMD getYMD() { return this.ymd; }
		boolean isJulian() { return this.julian; }
	}
	private static class DateWithNotes
	{
		private final CalYMD date;
		private final String notes;
		DateWithNotes(final CalYMD date, final String notes)
		{
			this.date = date;
			this.notes = notes;
		}
		CalYMD getCalYMD() { return this.date; }
		String getNotes() { return this.notes; }
	}
}

PARSER_END(GedcomDateValueParser)



SKIP :
{
	" " | "\t" | "\n" | "\r"
}

TOKEN :
{
	< FROM:        "FROM" > |
	< TO:          "TO"   > |
	< BEFORE:      "BEF"  > |
	< AFTER:       "AFT"  > |
	< BETWEEN:     "BET"  > |
	< AND:         "AND"  > |
	< ABOUT:       "ABT"  > |
	< CALCULATED:  "CAL"  > |
	< ESTIMATED:   "EST"  > |
	< INTERPRETED: "INT"  >
}

TOKEN :
{
	/*	< MONTH:
		"JAN" | "FEB" | "MAR" | "APR" | "MAY" | "JUN" |
		"JUL" | "AUG" | "SEP" | "OCT" | "NOV" | "DEC" 
		JAN | FEB > |*/
	< MONTH_LOWER_LIMIT: [] > |
	< JAN: "JAN" > |
	< FEB: "FEB" > |
	< MAR: "MAR" > |
	< APR: "APR" > |
	< MAY: "MAY" > |
	< JUN: "JUN" > |
	< JUL: "JUL" > |
	< AUG: "AUG" > |
	< SEP: "SEP" > |
	< OCT: "OCT" > |
	< NOV: "NOV" > |
	< DEC: "DEC" >
}

TOKEN :
{
	< GREGORIAN: "GREGORIAN" > |
	< JULIAN: "JULIAN" >
}

TOKEN :
{
	< LPAREN:  "(" > |
	< RPAREN:  ")" > |
	< NUMBER:  (["0"-"9"])+ > |
	< SLASH:   "/" > |
	< AT:      "@" > |
	< RAWTEXT: ~[")"] >
}

TOKEN :
{
	< BC: "BC" | "B.C." > |
	< CALENDAR_ESC: "#D" >
}

DatePeriod DateValue() :
{
	DatePeriod datePeriod = null;
	DateRange dateRange = null;
	DateWithNotes dateNotes = null;
	String notes = null;
	CalYMD date = null;
}
{
	(
		datePeriod = DatePeriod() |
		dateRange = DateRange() |
		datePeriod = DateApproximated() |
		dateNotes = DateInterpreted() |
		notes = DatePhrase() |
		date = Date()
	)

	<EOF>

	{
		if (datePeriod != null)
		{
			return datePeriod;
		}
		if (dateRange != null)
		{
			return new DatePeriod(dateRange,dateRange);
		}
		if (dateNotes != null)
		{
			// TODO date with notes
			return new DatePeriod(
				new DateRange(dateNotes.getCalYMD().getYMD(),dateNotes.getCalYMD().getYMD(),dateNotes.getCalYMD().isJulian(),-1,-1,new TimeZoneUnknown(),false),
				new DateRange(dateNotes.getCalYMD().getYMD(),dateNotes.getCalYMD().getYMD(),dateNotes.getCalYMD().isJulian(),-1,-1,new TimeZoneUnknown(),false));
		}
		if (notes != null)
		{
			// TODO notes
		}
		if (date != null)
		{
			return new DatePeriod(
				new DateRange(date.getYMD(),date.getYMD(),date.isJulian(),-1,-1,new TimeZoneUnknown(),true),
				new DateRange(date.getYMD(),date.getYMD(),date.isJulian(),-1,-1,new TimeZoneUnknown(),true));
		}
	}
}

DateRange DateRange() : {}
{
	{
		CalYMD earliest = null;
		CalYMD latest = null;
	}
	(
		<AFTER> earliest = Date() |
		<BEFORE> latest = Date() |
		<BETWEEN> earliest = Date() <AND> latest = Date()
	)
	{
		boolean julian;
		if (earliest == null)
		{
			julian = latest.isJulian();
			earliest = new CalYMD(YMD.getMinimum(),julian);
		}
		if (latest == null)
		{
			julian = earliest.isJulian();
			latest = new CalYMD(YMD.getMaximum(),julian);
		}
		julian = earliest.isJulian();
		return new DateRange(earliest.getYMD(),latest.getYMD(),julian,-1,-1,new TimeZoneUnknown(),false);
	}
}

DatePeriod DateApproximated() : {}
{
	{
		CalYMD date;
	}
	( <ABOUT> date = Date() | <CALCULATED> date = Date() | <ESTIMATED> date = Date() )
	{
		return new DatePeriod(
			new DateRange(date.getYMD(),date.getYMD(),date.isJulian(),-1,-1,new TimeZoneUnknown(),true),
			new DateRange(date.getYMD(),date.getYMD(),date.isJulian(),-1,-1,new TimeZoneUnknown(),true));
	}
}

DateWithNotes DateInterpreted() : {}
{
	{
		CalYMD date;
		String notes;
	}
	<INTERPRETED> date = Date() notes = DatePhrase()
	{
		return new DateWithNotes(date,notes);
	}
}

String DatePhrase() : {}
{
	{
		Token text;
	}
	<LPAREN> text = <RAWTEXT> <RPAREN>
	{
		return text.image;
	}
}

DatePeriod DatePeriod() : {}
{
	{
		CalYMD fromDate = null;
		CalYMD toDate = null;
	}
	(
		<FROM> fromDate = Date() [ <TO> toDate = Date() ] |
		<TO> toDate = Date()
	)
	{
		boolean julian;
		if (fromDate == null)
		{
			julian = toDate.isJulian();
			fromDate = new CalYMD(YMD.getMinimum(),julian);
		}
		if (toDate == null)
		{
			julian = fromDate.isJulian();
			toDate = new CalYMD(YMD.getMaximum(),julian);
		}
		julian = fromDate.isJulian();
		return new DatePeriod(
			new DateRange(fromDate.getYMD(),fromDate.getYMD(),julian,-1,-1,new TimeZoneUnknown(),false),
			new DateRange(toDate.getYMD(),toDate.getYMD(),julian,-1,-1,new TimeZoneUnknown(),false));
	}
}

CalYMD Date() : {}
{
	{
		boolean julian = false;
		YMD ymd;
	}
	[ julian = DateCalendarEscape() ] ymd = DateCalendar()
	{
		// TODO need to convert julian to gregorian, because YMD always
		// stores as gregorian.
		return new CalYMD(ymd,julian);
	}
}

boolean DateCalendarEscape() : {}
{
	{
		Token cal;
	}
	<AT> <CALENDAR_ESC> ( cal = <GREGORIAN> | cal = <JULIAN> ) <AT>
	{
		return cal.kind == JULIAN;
	}
}

YMD DateCalendar() : {}
{
	{
		int year = 0;
		int month = 0;
		int day = 0;
	}
	[ LOOKAHEAD(2) [ day = Day() ] month = Month() ] year = Year()
	{
		return new YMD(year,month,day);
	}
}

int Day() : {}
{
	<NUMBER>
	{
		return Integer.parseInt(this.token.image);
	}
}

int Month() : {}
{
	(
		<JAN> | <FEB> | <MAR> | <APR> | <MAY> | <JUN> |
		<JUL> | <AUG> | <SEP> | <OCT> | <NOV> | <DEC>
	)
	{
		return this.token.kind - MONTH_LOWER_LIMIT;
	}
}

int Year() : {}
{
	{
		Token year;
		boolean gregorian = false;
		boolean bc = false;
	}
	year = <NUMBER>	[ gregorian = SlashYear() ]	[ LOOKAHEAD(2) bc = BC() ]
	{
		int y = Integer.parseInt(year.image);
		if (gregorian)
		{
			++y;
		}
		if (bc)
		{
			y = -y;
		}
		if (y == 0)
		{
			throw new ParseException("year cannot be zero.");
		}
		return y;
	}
}

boolean SlashYear() : {}
{
	<SLASH> <NUMBER>
	{
		return true;
	}
}

boolean BC() : {}
{
	[ <LPAREN> ] <BC> [ <RPAREN> ]
	{
		return true;
	}
}
