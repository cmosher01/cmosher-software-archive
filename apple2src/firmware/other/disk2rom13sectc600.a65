                .FEATURE LABELS_WITHOUT_COLONS
                .EXPORT DISK2



BUFPTR  =       $26
SLOT    =       $2B
TMP     =       $3C
SECTOR  =       $3D

STACKBASE =     $0100
READBUF =       $0300
XLATE   =       $0800

SWITCHBASE      =     $C080
STEPOFFBASE     =     SWITCHBASE+$0
STEPONBASE      =     STEPOFFBASE+$1
MOTORON         =     SWITCHBASE+$9
DRV0EN          =     SWITCHBASE+$A
Q6OFF           =     SWITCHBASE+$C
Q7OFF           =     SWITCHBASE+$E

WAIT    =       $FCA8
PRERR   =       $FF2D
MONRTS  =       $FF58



                                ; build translation table
                                ; AA reserved
                                ; AB->00
                                ; AD->01
                                ; AE->02
                                ; AF->03
                                ; B5->04
                                ; B6->05
                                ; B7->06
                                ; BA->07
                                ; BB->08
                                ; BD->09
                                ; BE->0A
                                ; BF->0B
                                ; D5 reserved
                                ; D6->0C
                                ; D7->0D
                                ; DA->0E
                                ; DB->0F
                                ; DD->10
                                ; DE->11
                                ; DF->12
                                ; EA->13
                                ; EB->14
                                ; ED->15
                                ; EE->16
                                ; EF->17
                                ; F5->18
                                ; F6->19
                                ; F7->1A
                                ; FA->1B
                                ; FB->1C
                                ; FD->1D
                                ; FE->1E
                                ; FF->1F
DISK2   LDX     #$20
        LDY     #0
LC604   LDA     #$03
        STA     TMP
        CLC
        DEY
        TYA
LC60B   BIT     TMP
        BEQ     LC604
        ROL     TMP
        BCC     LC60B
        CPY     #$D5 ; $D5 is reserved to indicate header
        BEQ     LC604
        DEX
        TXA
        STA     XLATE,Y
        BNE     LC604



        JSR     MONRTS    ; calculate slot based on ROM code address
        TSX
        LDA     STACKBASE,X
        PHA
        ASL     A
        ASL     A
        ASL     A
        ASL     A
        STA     SLOT





        TAX
        LDA     #<(DENIB-1)
        PHA
        LDA     Q7OFF,X   ; set drive to "read" mode
        LDA     Q6OFF,X
        LDA     DRV0EN,X  ; engage drive 0
        LDA     MOTORON,X ; turn drive motor on





        LDY     #$50      ; move arm to track 0
LC63E   LDA     STEPOFFBASE,X
        TYA
        AND     #%00000011
        ASL     A
        ORA     SLOT
        TAX
        LDA     STEPONBASE,X
        LDA     #$56
        .IFDEF NODELAY
        LDA   #0
        NOP
        .ELSE
        JSR   WAIT
        .ENDIF
        DEY
        BPL     LC63E





        LDA     #>READBUF
        STA     BUFPTR+1
        LDA     #<READBUF
        STA     BUFPTR
        STA     SECTOR


READ    CLC
READ2   PHP
LC65F   LDA     Q6OFF,X
        BPL     LC65F
LC664   EOR     #$D5
        BNE     LC65F
LC668   LDA     Q6OFF,X
        BPL     LC668
        CMP     #$AA
        BNE     LC664
        NOP
LC672   LDA     Q6OFF,X
        BPL     LC672
        CMP     #$B5
        BEQ     ADDRH
        PLP
        BCC     READ
        EOR     #$AD
        BEQ     DATAH
        BNE     READ







ADDRH   LDY     #$03
        STY     $2A
LC688   LDA     Q6OFF,X
        BPL     LC688
        ROL     A
        STA     TMP
LC690   LDA     Q6OFF,X
        BPL     LC690
        AND     TMP
        DEY
        BNE     LC688
        PLP
        CMP     SECTOR
        BNE     READ
        BCS     READ2






;read first $9A bytes of nibblized data
;into $800-$899, backwards
;but each byte is xor'd with prev
DATAH   LDY     #$9A
LC6A3   STY     TMP
LC6A5   LDY     Q6OFF,X
        BPL     LC6A5
        EOR     XLATE,Y
        LDY     TMP
        DEY
        STA     XLATE,Y
        BNE     LC6A3

;read remaining $100 bytes of nibblized data
;into $300-$3FF
;but each byte is xor'd with prev
LC6B5   STY     TMP
LC6B7   LDY     Q6OFF,X
        BPL     LC6B7
        EOR     XLATE,Y
        LDY     TMP
        STA     (BUFPTR),Y
        INY
        BNE     LC6B5

;read checksum and verify
LC6C6   LDY     Q6OFF,X
        BPL     LC6C6
        EOR     XLATE,Y
        BNE     READ

        RTS







DENIB   TAY

LC6D2   LDX     #$00
LC6D4   LDA     XLATE,Y
        LSR     A
        ROL     READBUF+$CC,X
        LSR     A
        ROL     READBUF+$99,X
        STA     TMP
        LDA     (BUFPTR),Y
        ASL     A
        ASL     A
        ASL     A
        ORA     TMP
        STA     (BUFPTR),Y
        INY
        INX
        CPX     #$33
        BNE     LC6D4
        DEC     $2A
        BNE     LC6D2
        CPY     READBUF
        BNE     ERROR
        JMP     READBUF+1
ERROR   JMP     PRERR

        .BYTE   $FF
