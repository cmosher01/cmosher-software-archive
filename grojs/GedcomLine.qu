$(function() {

	module("GedcomLine");

	test("asPointer nominal", function() {
		equal(GedcomLine.prototype.asPointer("@abc@"), "abc");
	});

	test("asPointer nominal false", function() {
		equal(GedcomLine.prototype.asPointer("abc"), "");
	});

	test("asPointer nominal false begin at", function() {
		equal(GedcomLine.prototype.asPointer("@abc"), "");
	});

	test("asPointer nominal false end at", function() {
		equal(GedcomLine.prototype.asPointer("abc@"), "");
	});

	test("asPointer nominal false mid at", function() {
		equal(GedcomLine.prototype.asPointer("@ab@c@"), "");
	});

	test("asPointer one at", function() {
		equal(GedcomLine.prototype.asPointer("@"), "");
	});

	test("asPointer two ats", function() {
		equal(GedcomLine.prototype.asPointer("@@"), "");
	});

	test("asPointer three ats", function() {
		equal(GedcomLine.prototype.asPointer("@@@"), "");
	});

	test("asPointer four ats", function() {
		equal(GedcomLine.prototype.asPointer("@@@@"), "");
	});

	test("asPointer empty string", function() {
		equal(GedcomLine.prototype.asPointer(""), "");
	});

	test("asPointer leading space", function() {
		equal(GedcomLine.prototype.asPointer(" @abc@"), "");
	});

	test("asPointer trailing space", function() {
		equal(GedcomLine.prototype.asPointer("@abc@ "), "");
	});

	test("asPointer(null)", function() {
		equal(GedcomLine.prototype.asPointer(null), "");
	});

	test("asPointer()", function() {
		equal(GedcomLine.prototype.asPointer(), "");
	});

	test("replace nominal", function() {
		equal(GedcomLine.prototype.replaceAts("abc@@def"), "abc@def");
	});

	test("replace nominal global", function() {
		equal(GedcomLine.prototype.replaceAts("abc@@def@@ghi"), "abc@def@ghi");
	});

	test("replace no-op", function() {
		equal(GedcomLine.prototype.replaceAts("abcdef"), "abcdef");
	});

	test("replace single at", function() {
		equal(GedcomLine.prototype.replaceAts("abc@def"), "abc@def");
	});

	test("replace three ats", function() {
		equal(GedcomLine.prototype.replaceAts("abc@@@def"), "abc@@def");
	});

	test("replace empty string", function() {
		equal(GedcomLine.prototype.replaceAts(""), "");
	});

	test("replace null", function() {
		equal(GedcomLine.prototype.replaceAts(null), null);
	});

	test("replace undefined", function() {
		equal(GedcomLine.prototype.replaceAts(), undefined);
	});

	test("replace bad type 0", function() {
		equal(GedcomLine.prototype.replaceAts(0), 0);
	});

	test("replace bad type 1", function() {
		equal(GedcomLine.prototype.replaceAts(1), 1);
	});

	test("nominal no value: 0 HEAD", function() {
		var g = new GedcomLine(0, undefined, "HEAD", "");
		equal(g.getLevel(), 0);
		equal(g.getID(), "");
		equal(g.getTag(), "HEAD");
		equal(g.getVal(), "");
		equal(g.getPointer(), "");
		ok(!g.hasID());
		ok(!g.isPointer());
	});

	test("nominal object: 1 SOUR GRO", function() {
		var g = new GedcomLine(1, undefined, "SOUR", "GRO");
		equal(g.getLevel(), 1);
		equal(g.getID(), "");
		equal(g.getTag(), "SOUR");
		equal(g.getVal(), "GRO");
		equal(g.getPointer(), "");
		ok(!g.hasID());
		ok(!g.isPointer());
	});

	test("nominal object with ID: 0 @I0@ INDI", function() {
		var g = new GedcomLine(0, "@I0@", "INDI", "");
		equal(g.getLevel(), 0);
		equal(g.getID(), "I0");
		equal(g.getTag(), "INDI");
		equal(g.getVal(), "");
		equal(g.getPointer(), "");
		ok(g.hasID());
		ok(!g.isPointer());
	});

	test("nominal object with ID and value with ats: 0 @T7@ NOTE This is the text @@ the note.", function() {
		var g = new GedcomLine(0, "@T7@", "NOTE", "This is the text @@ the note.");
		equal(g.getLevel(), 0);
		equal(g.getID(), "T7");
		equal(g.getTag(), "NOTE");
		equal(g.getVal(), "This is the text @ the note.");
		equal(g.getPointer(), "");
		ok(g.hasID());
		ok(!g.isPointer());
	});

	test("nominal object with pointer value: 2 SOUR @S0@", function() {
		var g = new GedcomLine(2, "", "SOUR", "@S0@");
		equal(g.getLevel(), 2);
		equal(g.getID(), "");
		equal(g.getTag(), "SOUR");
		equal(g.getVal(), "");
		equal(g.getPointer(), "S0");
		ok(!g.hasID());
		ok(g.isPointer());
	});

	test("nominal conc", function() {
		var g = new GedcomLine(0, "@T7@", "NOTE", "This is a lon");
		var c = new GedcomLine(1, "", "CONC", "g note split @@ conc.");
		g = g.conc(c.getVal());
		equal(g.getLevel(), 0);
		equal(g.getID(), "T7");
		equal(g.getTag(), "NOTE");
		equal(g.getVal(), "This is a long note split @ conc.");
		equal(g.getPointer(), "");
		ok(g.hasID());
		ok(!g.isPointer());
	});

	test("nominal cont", function() {
		var g = new GedcomLine(0, "@T7@", "NOTE", "This is a note.");
		var c = new GedcomLine(1, "", "CONT", "It is split @@ cont.");
		g = g.cont(c.getVal());
		equal(g.getLevel(), 0);
		equal(g.getID(), "T7");
		equal(g.getTag(), "NOTE");
		equal(g.getVal(), "This is a note.\nIt is split @ cont.");
		equal(g.getPointer(), "");
		ok(g.hasID());
		ok(!g.isPointer());
	});

	test("parse nominal no value: 0 HEAD", function() {
		var g = GedcomLine.prototype.parse("0 HEAD");
		equal(g.getLevel(), 0);
		equal(g.getID(), "");
		equal(g.getTag(), "HEAD");
		equal(g.getVal(), "");
		equal(g.getPointer(), "");
		ok(!g.hasID());
		ok(!g.isPointer());
	});

	test("parse nominal object: 1 SOUR GRO", function() {
		var g = new GedcomLine.prototype.parse("1 SOUR GRO");
		equal(g.getLevel(), 1);
		equal(g.getID(), "");
		equal(g.getTag(), "SOUR");
		equal(g.getVal(), "GRO");
		equal(g.getPointer(), "");
		ok(!g.hasID());
		ok(!g.isPointer());
	});

	test("parse nominal object with ID: 0 @I0@ INDI", function() {
		var g = new GedcomLine.prototype.parse("0 @I0@ INDI");
		equal(g.getLevel(), 0);
		equal(g.getID(), "I0");
		equal(g.getTag(), "INDI");
		equal(g.getVal(), "");
		equal(g.getPointer(), "");
		ok(g.hasID());
		ok(!g.isPointer());
	});

	test("parse nominal object with ID and value with ats: 0 @T7@ NOTE This is the text @@ the note.", function() {
		var g = new GedcomLine.prototype.parse("0 @T7@ NOTE This is the text @@ the note.");
		equal(g.getLevel(), 0);
		equal(g.getID(), "T7");
		equal(g.getTag(), "NOTE");
		equal(g.getVal(), "This is the text @ the note.");
		equal(g.getPointer(), "");
		ok(g.hasID());
		ok(!g.isPointer());
	});

	test("parse nominal object with pointer value: 2 SOUR @S0@", function() {
		var g = new GedcomLine.prototype.parse("2 SOUR @S0@");
		equal(g.getLevel(), 2);
		equal(g.getID(), "");
		equal(g.getTag(), "SOUR");
		equal(g.getVal(), "");
		equal(g.getPointer(), "S0");
		ok(!g.hasID());
		ok(g.isPointer());
	});

	test("parse only skips one space: 1 SOUR  GRO", function() {
		var g = new GedcomLine.prototype.parse("1 SOUR  GRO");
		equal(g.getLevel(), 1);
		equal(g.getID(), "");
		equal(g.getTag(), "SOUR");
		equal(g.getVal(), " GRO");
		equal(g.getPointer(), "");
		ok(!g.hasID());
		ok(!g.isPointer());
	});
});
