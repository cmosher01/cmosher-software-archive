function ChrisMosherUtilInternalTestClass() { }

$(function() {

	module("Util");

	test("forEach nominal", function() {
		var r, rr;

		r = ["a","b","c"];

		rr = [];
		Util.prototype.forEach(r,function(v) {
			rr.push(v);
		});

		deepEqual(rr,r);
	});

	test("forEach null", function() {
		var r, rr;

		r = ["a",null,"c"];

		rr = [];
		Util.prototype.forEach(r,function(v) {
			rr.push(v);
		});

		deepEqual(rr,r);
	});

	test("forEach deleted", function() {
		var r, rr;

		r = ["a","b","c"];
		delete r[1];

		rr = [];
		Util.prototype.forEach(r,function(v) {
			rr.push(v);
		});

		deepEqual(rr,["a","c"]);
	});

	test("forEach sparse", function() {
		var r, rr;

		r = [];
		r[0] = "a";
		r[10000] = "b";

		rr = [];
		Util.prototype.forEach(r,function(v) {
			rr.push(v);
		});

		deepEqual(rr,["a","b"]);
	});





	test("consolodate nominal", function() {
		var r, rr;

		r = ["a","b","c"];
		delete r[1];

		rr = Util.prototype.consolodate(r);
		deepEqual(rr,["a","c"]);
	});





	test("remove nominal", function() {
		var r;

		r = ["a","b","c"];
		delete r[1];
		notDeepEqual(r,["a","c"]);
		deepEqual(r,["a",undefined,"c"]);

		r = ["a","b","c"];
		r = Util.prototype.remove("b",r);
		deepEqual(r,["a","c"]);
		notDeepEqual(r,["a",undefined,"c"]);
	});




	test("class name of classic OO object", function() {
		equal(Util.prototype.getClassName(new ChrisMosherUtilInternalTestClass()),"ChrisMosherUtilInternalTestClass");
	});

	test("class name of Object", function() {
		equal(Util.prototype.getClassName(new Object()),"Object");
	});

	test("class name of String", function() {
		equal(Util.prototype.getClassName(new String("testing")),"String");
	});

	test("class name of string", function() {
		equal(Util.prototype.getClassName("testing"),"String");
	});

	test("class name of Array", function() {
		equal(Util.prototype.getClassName(new Array(1,2,3)),"Array");
	});

	test("class name of array", function() {
		equal(Util.prototype.getClassName([1,2,3]),"Array");
	});

	test("class name of number", function() {
		equal(Util.prototype.getClassName(new Number(3.14)),"Number");
	});

	test("class name of number", function() {
		equal(Util.prototype.getClassName(3.14),"Number");
	});

	test("class name of number property", function() {
		equal(Util.prototype.getClassName(window.length),"Number");
	});

	test("class name of Boolean", function() {
		equal(Util.prototype.getClassName(new Boolean(true)),"Boolean");
	});

	test("class name of boolean", function() {
		equal(Util.prototype.getClassName(true),"Boolean");
	});

	test("class name of null", function() {
		equal(Util.prototype.getClassName(null),"null");
	});

	test("class name of undefined", function() {
		equal(Util.prototype.getClassName(undefined),"undefined");
	});

	test("class name of omitted argument", function() {
		equal(Util.prototype.getClassName(),"undefined");
	});

	test("class name of castrated object", function() {
		var x;
		x = new ChrisMosherUtilInternalTestClass();
		x.constructor = null;
		equal(Util.prototype.getClassName(x),"Object");
	});

	test("class name of corrupted object", function() {
		var x;
		x = new ChrisMosherUtilInternalTestClass();
		x.constructor = {foo:"bar"};
		equal(Util.prototype.getClassName(x),"Object");
	});

	test("class name of corrupted object 2", function() {
		var x;
		x = new ChrisMosherUtilInternalTestClass();
		x.constructor = [1,2,3];
		equal(Util.prototype.getClassName(x),"Object");
	});

	test("class name of Date", function() {
		equal(Util.prototype.getClassName(new Date()),"Date");
	});

	test("class name of RegExp literal", function() {
		equal(Util.prototype.getClassName(new RegExp(/.*/g)),"RegExp");
	});

	test("class name of regexp literal", function() {
		equal(Util.prototype.getClassName(/.*/g),"RegExp");
	});

	test("class name of function object", function() {
		equal(Util.prototype.getClassName(function(){}),"Function");
	});

	test("class name of castrated function object", function() {
		var x = function(){};
		x.constructor = null;
		equal(Util.prototype.getClassName(x),"Function");
	});

	test("class name of castrated regexp", function() {
		var x = /.*/g;
		x.constructor = null;
		equal(Util.prototype.getClassName(x),"RegExp");
	});

	test("class name of Object type", function() {
		equal(Util.prototype.getClassName(Object),"Function");
	});

	test("class name of Math type", function() {
		equal(Util.prototype.getClassName(Math),"Math");
	});

	test("class name of Date type", function() {
		equal(Util.prototype.getClassName(Date),"Function");
	});

	test("class name of window", function() {
		equal(Util.prototype.getClassName(window),"Window");
	});

	test("class name of malicious corruption", function() {
		var x = new ChrisMosherUtilInternalTestClass();
		x.constructor = {name:"Foo"};
		equal(Util.prototype.getClassName(x),"Foo"); // can't fix this?
	});
});
