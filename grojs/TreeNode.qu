$(function() {

	module("TreeNode");

	test("nominal child", function() {
		var a, b, r, i, c;

		a = new TreeNode();
		a.obj = "a";
		b = new TreeNode();
		b.obj = "b";

		a.addChild(b);
		r = a.getChildren();

		i = 0;
		Util.prototype.forEach(r,function() {i++;});
		equal(i, 1);

		Util.prototype.forEach(r,function(v) {
			equal(v.obj, "b");
		});

		equal(b.getParent().obj, "a");
	});

	test("nominal remove child", function() {
		var a, b, r, i, c;

		a = new TreeNode();
		a.obj = "a";
		b = new TreeNode();
		b.obj = "b";

		a.addChild(b);
		a.removeChild(b);
		r = a.getChildren();

		i = 0;
		Util.prototype.forEach(r,function() {i++;});
		equal(i, 0);

		equal(b.getParent(), null);
	});

	test("nominal remove from parent", function() {
		var a, b, r, i;

		a = new TreeNode();
		a.obj = "a";
		b = new TreeNode();
		b.obj = "b";

		a.addChild(b);
		b.removeFromParent();

		r = a.getChildren();

		i = 0;
		Util.prototype.forEach(r,function() {i++;});
		equal(i, 0);

		equal(b.getParent(), null);
	});

	test("add child of other existing parent", function() {
		var a, b, r, i, x;

		a = new TreeNode();
		a.obj = "a";
		b = new TreeNode();
		b.obj = "b";
		a.addChild(b);

		x = new TreeNode();
		x.obj = "x";
		x.addChild(b);



		r = a.getChildren();
		i = 0;
		Util.prototype.forEach(r,function() {i++;});
		equal(i, 0);



		r = x.getChildren();

		i = 0;
		Util.prototype.forEach(r,function() {i++;});
		equal(i, 1);

		Util.prototype.forEach(r,function(v) {
			equal(v.obj, "b");
		});



		equal(b.getParent().obj, "x");
	});

	test("3 children", function() {
		var p, c1, c2, c3, r, i, c;

		p = new TreeNode();
		p.obj = "p";
		c1 = new TreeNode();
		c1.obj = "c1";
		p.addChild(c1);
		c2 = new TreeNode();
		c2.obj = "c2";
		p.addChild(c2);
		c3 = new TreeNode();
		c3.obj = "c3";
		p.addChild(c3);

		r = p.getChildren();

		i = 0;
		Util.prototype.forEach(r,function() {i++;});
		equal(i, 3);

		equal(r[0].obj, "c1");
		equal(r[1].obj, "c2");
		equal(r[2].obj, "c3");

		equal(c1.getParent().obj, "p");
		equal(c2.getParent().obj, "p");
		equal(c3.getParent().obj, "p");
	});

	test("remove middle child", function() {
		var p, c1, c2, c3, r, i, c;

		p = new TreeNode();
		p.obj = "p";
		c1 = new TreeNode();
		c1.obj = "c1";
		p.addChild(c1);
		c2 = new TreeNode();
		c2.obj = "c2";
		p.addChild(c2);
		c3 = new TreeNode();
		c3.obj = "c3";
		p.addChild(c3);

		p.removeChild(c2);

		r = p.getChildren();

		equal(r.length,2);
		i = 0;
		Util.prototype.forEach(r,function() {i++;});
		equal(i, 2);

		equal(r[0].obj, "c1");
		equal(r[1].obj, "c3");

		equal(c1.getParent().obj, "p");
		equal(c2.getParent(), null);
		equal(c3.getParent().obj, "p");
	});

	test("add undefined child should raise", function() {
		var n;
		n = new TreeNode();
		raises(function() {
			n.addChild(undefined);
		})
	});

	test("add null child should raise", function() {
		var n;
		n = new TreeNode();
		raises(function() {
			n.addChild(null);
		})
	});

	test("remove undefined child should raise", function() {
		var n;
		n = new TreeNode();
		raises(function() {
			n.removeChild(undefined);
		})
	});

	test("remove null child should raise", function() {
		var n;
		n = new TreeNode();
		raises(function() {
			n.removeChild(null);
		})
	});
});
