$(function() {

	module("GedcomTree", {
		setup: function() {
			var gc =
				"0 HEAD\n"+
				"1 SOUR GRO\n"+
				"2 NAME Genealogy Research Organizer\n"+
				"2 CORP Christopher Alan Mosher\n"+
				"3 ADDR 41 Brook Pine Drive\n"+
				"4 CONT Shelton, CT 06484-5912\n"+
				"1 GEDC\n"+
				"2 VERS 5.5\n"+
				"1 NOTE This tree contains th\n"+
				"2 CONC e Mosher family.\n"+
				"2 CONT\n"+
				"2 CONT The name Mosher was originally Moger.\n"+
				"\n"+
				"0 @I0@ INDI\n"+
				"1 _XY 195 30\n"+
				"1 NAME John /Moger/\n"+
				"2 SOUR @S0@\n"+
				"\n"+
				"0 @S0@ SOUR\n"+
				"1 AUTH LDS\n"+
				"1 TITL International Genealogical Index (IGI)\n"+
				"1 PUBL http://www.familysearch.org\n"+
				"\n"+
				"0 @S1@ SOUR\n"+
				"1 AUTH LDS\n"+
				"1 TITL Ancestral File\n"+
				"1 PUBL http://www.familysearch.org";
			this.t = GedcomTree.parse(gc);
		}
	});

	test("missing new operator", function() {
		raises(function() {
			GedcomTree();
		});
	});

	test("nominal top level", function() {
		var r = this.t.getRoot().getChildren();
		equal(r[0].line.getTag(),"HEAD");
		equal(r[1].line.getID(),"I0"); equal(r[1].line.getTag(),"INDI");
		equal(r[2].line.getID(),"S0"); equal(r[2].line.getTag(),"SOUR");
		equal(r[3].line.getID(),"S1"); equal(r[3].line.getTag(),"SOUR");
	});

	test("nominal level 1", function() {
		var rhead = this.t.getRoot().getChildren()[0].getChildren();
		equal(rhead[0].line.getTag(),"SOUR"); equal(rhead[0].line.getVal(),"GRO");
		equal(rhead[1].line.getTag(),"GEDC"); equal(rhead[1].line.getVal(),"");
	});

	test("nominal cont", function() {
		var addr = this.t.getRoot().getChildren()[0].getChildren()[0].getChildren()[1].getChildren()[0].line;
		equal(addr.getTag(),"ADDR"); equal(addr.getVal(),"41 Brook Pine Drive\nShelton, CT 06484-5912");
	});

	test("nominal conc plus cont", function() {
		var note = this.t.getRoot().getChildren()[0].getChildren()[2].line;
		equal(note.getTag(),"NOTE"); equal(note.getVal(),"This tree contains the Mosher family.\n\nThe name Mosher was originally Moger.");
	});

	test("nominal xref", function() {
		var sour_xref = this.t.getRoot().getChildren()[1].getChildren()[1].getChildren()[0].line;
		equal(sour_xref.getTag(),"SOUR"); equal(sour_xref.getPointer(),"S0");
	});

	test("nominal look up xref", function() {
		var s1 = this.t.getNode("S1");
		equal(s1.line.getID(),"S1");
		equal(s1.getChildren()[1].line.getVal(),"Ancestral File");
	});




	module("GedcomTreeFile", {
		setup: function() {
			var qu = this;
			$.ajaxSetup({
				dataType: "text"
			});
			stop(); // wait for ged file to load (or fail)
			$.get("lib/testged/TGC55C.ged")
				.success(function(gc) {
					qu.gtree = GedcomTree.parse(gc);
					start();
				})
				.error(function(s,m,e) {
					ok(false,"Error reading file "+this.url+": "+e);
					start();
				});
		}
	});

	test("nominal read", function() {
		var subm = this.gtree.getNode("SUBMISSION");
		equal(subm.line.getID(),"SUBMISSION");
		equal(subm.getChildren()[1].line.getTag(),"FAMF");
	});


});
