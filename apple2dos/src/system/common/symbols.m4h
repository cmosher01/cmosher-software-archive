.text
ifdef(`FRANKLIN',`
define(`VERSION',330)
')

                                ; --------------------------------
                                ; ZERO-PAGE ADDRESSES
                                ; --------------------------------

define(`CH',``$'24')           ; OFFSET FROM LEFT EDGE OF WINDOW
                                ; TO NEXT CHR POS'N ON SCRN LINE.
                                ; (RANGE:  $00-$23.)
define(`PT2BTBUF',``$'26')           ; PTR ($26,$27) TO TARGET BUF USED
                                ; WHEN READING IN DOS DURING BOOT.
define(`HOLDNIBL',``$'26')           ; TEMP REG USED FOR HOLDING TWO-
                                ; ENCODED NIBBLES WHEN WRITING
                                ; A SECTOR DURING RWTS'S FORMAT OR
                                ; WRITE OPERATIONS.
define(`PROSCRTH',``$'26')           ; TEMP REG USED FOR:
                                ; - DECODING ODD/EVEN ADDR FIELD
                                ; BYTES.
                                ; - CNTR AND INDEX TO RWTS BUFFERS
                                ; (1 & 2) WHEN POSTNIBBLING.
                                ; - CNTR FOR # OF CHANCES TO FIND
                                ; THE CORRECT ADDR PROLOGUE.
define(`STPSDONE',``$'26')           ; - CNTR FOR # OF HALFTRKS MOVED.
                                ; - CURRENT DISTANCE (EXPRESSED IN
                                ; HALFTRACKS) FROM THE START OR
                                ; DESTINATION HALFTRACK POS'NS.
define(`FRMTSLOT',``$'27')           ; SLOT * 16 USED TO INDEX DRIVE
                                ; BASE ADDRESSES.
define(`HOLDPRES',``$'27')           ; HOLDS CURRENT HALFTRACK POSITION
                                ; WHEN SEEKING.
define(`CKSUMCAL',``$'27')           ; RUNNING CHKSUM CALCULATION USED
                                ; WHEN READING ODD-EVEN ENCODED
                                ; ADDRESS FIELD BYTES.
define(`BASL',``$'28')           ; PTR ($28,$29) TO THE LEFT END OF
                                ; THE SCREEN LINE.
define(`DESTRK',``$'2A')           ; DESTINATION HALFTRACK POS'N WHEN
                                ; SEEKING.
define(`SLT16ZPG',``$'2B')           ; SLOT*16 USED TO INDEX DRIVE
                                ; FUNCTIONS.
define(`CKSUMDSK',``$'2C')           ; DECODED CHECKUSM VAL READ FROM
                                ; ADDR FIELD (RWTS).
define(`SECDSK',``$'2D')           ; PHYS SEC # FOUND IN ADDR FIELD.
define(`TRKDSK',``$'2E')           ; TRK # FOUND IN ADDR FIELD.
define(`VOLDSK',``$'2F')           ; VOL # FOUND IN ADDR FIELD.
define(`PROMPT',``$'33')           ; PROMPT CHAR USED TO SIGNAL INPUT
                                ; IS REQUIRED.  ALSO USED AS A FLG
                                ; IN THE CMD PARSING & PROCESSING
                                ; ROUTINES.
define(`DRVZPG',``$'35')           ; DENOTES DRIVE SELECTED:
                                ; NEG = DRIVE 1, POS = DRIVE 2.
define(`CSW',``$'36')           ; MAIN OUTPUT HOOK (ALSO KNOWN AS
                                ; THE CHARACTER OUTPUT SWITCH).
                                ; PTR ($36,$37) TO DEVICE/ROUTINE
                                ; WHICH HANDLES OUTPUT CHARACTERS.
define(`KSW',``$'38')           ; MAIN INPUT HOOK (ALSO KNOWN AS
                                ; THE KEYBOARD SWITCH).
                                ; PTR ($38,$39) TO DEVICE/ROUTINE
                                ; THAT HANDLES INPUT CHARACTERS.
define(`PTR2DCT',``$'3C')           ; PTR ($3C,$3D) TO RWTS'S DEVICE
                                ; CHARACTERISTIC TABLE.
define(`BOOTSEC',``$'3D')           ; PHYS SEC # WANTED WHEN BOOTING.
define(`PTR2RDSC',``$'3E')           ; PTR ($3E,$3F) TO BOOT0'S READ-
                                ; SECTOR SUBROUT'N (BTRDSEC, $CS5C
                                ; WHERE S=SLOT #, NORMALLY=$C65C.)
define(`PTR2BUF',``$'3E')           ; PTR ($3E,$EF) TO RWTS'S CURRENT
                                ; DATA BUFFER.
define(`HOLDAA',``$'3E')           ; - HOLDS  A CONSTANT ($AA) FOR
                                ; PROLOGUE AND EPILOGUE BYTES
                                ; USED WHEN FORMATTING.
                                ; - ALSO USED AS A TEMP REG WHEN
                                ; CREATING ODD-EVEN ENCODED BYTS
                                ; ASSOC WITH THE ADDR FIELD.


ifelse(eval(VERSION < 330),1,`
define(`FRMTVOL',``$'2F')           ; VOL # TO WRITE WHEN FORMATTING.
define(`FRMTKCTR',``$'41')           ; TRK# TO WRITE/READ WHEN FORMAT-
                                ; TING/VERIFYING.
define(`FRMTSEC',``$'4B')           ; HOLDS # OF SEC TO BE FORMATTED
define(`ENC44MASK',``$'4A')           ; HOLDS 10101010 MASK FOR 4 & 4 ENCODING
',`
define(`FRMTVOL',``$'41')           ; VOL # TO WRITE WHEN FORMATTING.
define(`FRMTKCTR',``$'44')           ; TRK# TO WRITE/READ WHEN FORMAT-
                                ; TING/VERIFYING. ALSO ACTS AS A
                                ; CNTR OF THE # OF TRKS FORMATTED/
                                ; VERIFIED.
define(`FRMTSEC',``$'3F')           ; HOLDS # OF SEC TO BE FORMATTED &
                                ; ALSO ACTS AS CNTR FOR # OF SECS
                                ; VERIFIED WHEN CHECKING TRK JUST
                                ; FORMATTED.
')

define(`A3L',``$'40')           ; MULTIPURPOSE REG & PTR ($40,$41)
define(`A3H',``$'41')
define(`A4L',``$'42')           ; MULTIPURPOSE REG & PTR ($42,$43)
define(`A4H',``$'43')
define(`A5L',``$'44')           ; MULTIPURPOSE REG & PTR ($44,$45)
define(`A5H',``$'45')

define(`SYNCNTR',``$'45')           ; # OF SYNC BYTES TO WRT BTWN SECS
                                ; & DELAY CNTR TO LET SOME SYNCS
                                ; PASS BY READ HEAD WHEN VERIFYING
                                ; A TRK JUST FORMATTED.
define(`MTRTIME',``$'46')           ; MOTOR-ON-TIME COUNT ($46,$47).
                                ; CNTR USED TO DETERMINE IF THE
                                ; DRIVE MOTOR HAS BEEN ON LONG
                                ; ENOUGH TO DO RELIABLE READING.
                                ; THE MOTOR IS CONSIDERED TO BE UP
                                ; TO SPEED AFTER APPROX. 1 SECOND
                                ; (AT WHICH TIME, MTRTIME = 0000).
define(`PTR2IOB',``$'48')           ; PTR ($48,49) TO RWTS'S INPUT/
                                ; OUTPUT BLOCK (IOB).
define(`STATUS',``$'48')           ; STATUS REGISTER SAVE AREA.
define(`LOMEM',``$'4A')           ; PTR ($4A,$4B) TO START OF INTEGER
                                ; BASIC'S VARIABLE TABLE.
define(`HIMEM',``$'4C')           ; PTR ($4C,$4D) TO END OF INTEGER
                                ; BASIC PRGM.
define(`TXTTAB',``$'67')           ; PTR ($67,$68) TO START OF THE
                                ; APPLESOFT PRGM TEXT. DEFAULTS TO
                                ; $801 ON A COLDSTART (ONCE EXECU-
                                ; TION FLOWS INTO APPLESOFT).
                                ; PTR'S CONTENTS CAN BE CHANGED TO
                                ; ACCOMMODATE THE LOADING OF AN
                                ; APPLESOFT PRGM IN A NON-STANDARD
                                ; POSITION.
define(`VARTAB',``$'69')           ; PTR ($69,$6A) TO START OF SIMPLE
                                ; VARIABLE TABLE.
define(`FRETOP',``$'6F')           ; PTR ($6F,$70) TO START OF FREE
                                ; SPACE (LOCATED BTWN THE END OF
                                ; THE VARIABLE TBL & THE START OF
                                ; THE STRING VALUES).
define(`MEMSIZ',``$'73')           ; PTR ($73,$74) TO HIGHEST MEMORY
                                ; LOCATION (PLUS 1) THAT IS AVAIL-
                                ; ABLE TO AN APPLESOFT PRGM.  (NOT
                                ; TO BE CONFUSED WITH THE END OF
                                ; THE APPLESOFT PRGM). CAN ALSO BE
                                ; EXPRESSED AS A PTR TO THE FIRST
                                ; BYTE OF THE DOS BUFFER REGION.
define(`CURLIN',``$'75')           ; CURRENT APPLESOFT PROGRAM LINE
                                ; NUMBER ( $75,$76).  USED BY DOS
                                ; TO DETERMINE IF BASIC IS RUNNING.
                                ; (CURLIN+1 CONTAINS AN $FF WHEN
                                ; COMPUTER IS IN THE IMMED MODE.)
define(`PRGEND',``$'AF')           ; PTR ($AF,$B0) TO END OF APPLESOFT
                                ; PRGM (PLUS 1) IF FP CMD WAS USED
                                ; OR TO END OF PRGM (PLUS 2) IF A
                                ; NEW CMD WAS USED.
define(`INTPGMST',``$'CA')           ; PTR ($CA,$CB) TO START OF THE
                                ; INTEGER PRGM.
define(`INTVRLND',``$'CC')           ; INTEGER BASIC'S CURRENT END-OF-
                                ; VARIABLE PTR ($CC,$CD).
define(`PROTFLG',``$'D6')           ; PRGM PROTECTION FLAG.
                                ; IF PROTECTION FLAG IS ON (NEG),
                                ; ALL APPLESOFT CMDS CAUSE A RUN &
                                ; DOS'S SAVE CMD CAUSE A PHONY
                                ; PROGRAM-TOO-LARGE ERROR MSG TO BE
                                ; GENERATED.
define(`ERRFLG',``$'D8')           ; ON-ERROR FLAG.  EQUALS $80 IF
                                ; ON-ERR IS ACTIVE.
define(`RUNMODE',``$'D9')           ; INTEGER BASIC'S MODE FLAG.
                                ; CONTAINS A NEG VALUE IF INTEGER
                                ; IS IN THE DEFERRED MODE.


                                ; --------------------------------
                                ; PAGE TWO
                                ; --------------------------------
define(`BUF200',``$'200')          ; THE INPUT BUFFER ($200-$2FF).
                                ; (ALSO KNOWN AS KEYBOARD BUFFER.)

                                ; --------------------------------
                                ; PAGE THREE
                                ; --------------------------------
define(`PG3DOSVT',``$'3D0')          ; START OF PAGE-3 DOS VECTOR TBL.
define(`RESETVEC',``$'3F2')          ; RESET VECTOR.  CONTAINS ADDR OF
                                ; ROUT'N WHERE EXECUT'N DIVERTS TO
                                ; WHEN THE RESET KEY IS PRESSED.
define(`VLDBYTE',``$'3F4')          ; RESET VALIDATION BYTE.
                                ; IF $3F3 EOR #$A5 IS NOT EQUAL TO
                                ; $3F4, THEN DISK REBOOTS AND A
                                ; COLDSTART IS DONE.  OTHERWISE,
                                ; EXECUTION GOES TO THE ADDR IN
                                ; $3F2/$3F3.


                                ; --------------------------------
                                ; TEXTSCREEN HOLES
                                ; --------------------------------
define(`TRK4DRV1',``$'478')          ; BASE ADR USED TO REFERENCE THE
                                ; LOCATION THAT CONTAINS THE LAST
                                ; HALFTRACK ON WHICH DRIVE 1 WAS
                                ; ALIGNED.
define(`PRESTRK',``$'478')          ; - CURRENT HALFTRACK NUMBER.
                                ; - SAVE REG FOR WHOLE TRK# WANTED
                                ; WHEN HAVE TO GO RECALIBRATE.
define(`TRK4DRV2',``$'4F8')          ; BASE ADR USED TO REFERENCE THE
                                ; LOCATION THAT CONTAINS THE LAST
                                ; HALFTRACK ON WHICH DRIVE 2 WAS
                                ; ALIGNED.
define(`RSEEKCNT',``$'4F8')          ; CNTR FOR # OF RE-SEEKS ALLOWED
                                ; BETWEEN RECALIBRATIONS (4 --> 1,
                                ; DO RECALIBRATION WHEN CNTR = 0.)

define(`READCNTR',``$'578')          ; CNTR FOR # OF ATTEMPTS ALLOWED TO
                                ; GET A GOOD ADDR OR DATA READ.
define(`SLOTPG5',``$'5F8')          ; SLOT*16 USED WHEN DOS WAS BOOTED

define(`SLOTPG6',``$'678')          ; SLOT*16 USED WHEN FORMATTING &
                                ; WRITING.
define(`RECLBCNT',``$'6F8')          ; CNTR FOR # OF RECALIBRATIONS
                                ; ALLOWED BEFORE RWTS GIVES UP.



                                ; --------------------------------
                                ; RAM-BASED APPLESOFT ADDRESSES
                                ; A(RAM)
                                ; --------------------------------
define(`CLRFPRAM',``$'E65')          ; ENTRY POINT TO CLEAR VARIABLES
                                ; FROM A RAM-BASED APPLESOFT PRGM.
define(`RUNFPRAM',``$'FD4')          ; ENTRY POINT TO EXECUTE RAM-BASED
                                ; APPLESOFT PRGM.


                                ; --------------------------------
                                ; DOS BUFFER START
                                ; --------------------------------

define(`DOSTOP',``$'BF00')         ; Mosher: first byte of highest page to
                                ; relocate DOS to





                                ;
define(`COL80OFF',``$'C00C')
define(`ALTCAHR0FF',``$'C00E')

define(`RRAMWXXXD2',``$'C080')
define(`RROMWRAMD2',``$'C081')
define(`RROMWXXXD2',``$'C082')
define(`RRAMWRAMD2',``$'C083')
define(`RRAMWXXXD1',``$'C088')
define(`RROMWRAMD1',``$'C089')
define(`RROMWXXXD1',``$'C08A')
define(`RRAMWRAMD1',``$'C08B')

                                ; --------------------------------
                                ; DRIVE FUNCTION BASE ADDRS
                                ; --------------------------------
                                ; NOTE:  THE ACTUAL ADDRESSES
                                ; USED ARE DEPENDENT UPON WHICH
                                ; SLOT HOUSES THE DSK CONTROLLER
                                ; CARD. (SEE COMMENTS IN ANY ONE
                                ; OF THE FORMATTED DISASSEMBLIES
                                ; OF RWTS FOR MORE DETAILS.)

                                ; TURN STEPPER MOTOR MAGNETS OFF OR ON.
define(`MAG0FF',``$'C080')
define(`MAG0ON',``$'C081')
define(`MAG1FF',``$'C082')
define(`MAG1ON',``$'C083')
define(`MAG2FF',``$'C084')
define(`MAG2ON',``$'C085')
define(`MAG3FF',``$'C086')
define(`MAG3ON',``$'C087')

define(`MTROFF',``$'C088')         ; TURN DRIVE MOTOR OFF.
define(`MTRON',``$'C089')         ; TURN DRIVE MOTOR ON.
define(`SELDRV1',``$'C08A')         ; SELECT DRIVE 1.
define(`SELDRV2',``$'C08B')         ; SELECT DRIVE 2.
define(`Q6L',``$'C08C')         ; SHIFT BYTE IN OR OUT OF LATCH.
define(`Q6H',``$'C08D')         ; LOAD LATCH FROM DATA BUS.
define(`Q7L',``$'C08E')         ; PREPARE TO READ.
define(`Q7H',``$'C08F')         ; PREPARE TO WRITE.

define(`BTRDSEC',``$'C65C')         ; BOOT0'S READ SECTOR SUBROUTINE.
                                ; (ACTUALLY=$CS5C, WHERE S=SLOT#.)


                                ; --------------------------------
                                ; APPLESOFT ADDRESSES
                                ; --------------------------------
define(`RESTART',``$'D43C')         ; APLSFT BASIC'S WRMSTART ROUTINE.
define(`SETLINKS',``$'D4F2')         ; ROUT'N THAT CLEARS ALL VAR'BLES,
                                ; RESETS THE STK PTR & RECALCS THE
                                ; LINKS IN @ APPLESOFT PRGM LINE.
                                ; (THIS ROUTINE IS WHAT ENABLES
                                ; APLSFT PRGMS TO BE RELOCATABLE.)
define(`SETZPTRS',``$'D665')         ; APPLESOFT ROUTINE THAT SIMULATES
                                ; CLEAR & RESTORE STATEMENTS.
define(`NEWSTT',``$'D7D2')         ; ROUTINE TO COLLECT & EXECUTE THE
                                ; APPLESOFT PRGM STATEMENT.
define(`BSCERHLR',``$'D865')         ; BASIC'S ERROR-HANDLING ROUTINE.
define(`BASICCLD',``$'E000')         ; BASIC'S COLDSTART ROUTINE.
define(`BASICWRM',``$'E003')         ; BASIC'S WARMSTART ROUTINE.
define(`BASICCHN',``$'E836')         ; BASIC'S CHAIN ENTRY POINT.
define(`BASICERR',``$'E3E3')         ; BASIC'S ERROR HANDLER???

                                ; --------------------------------
                                ; MONITOR ROM ROUTINES
                                ; --------------------------------
define(`INSDS2',``$'F88E')         ; Instruction translation routine
define(`OLDBRK',``$'FA59')         ; DEFAULT BREAK INTERRUPT HANDLER.
define(`INIT',``$'FB2F')         ; SCREEN INITIALIZATION ROUTINE.
                                ; (SET FULL SCREEN TEXT.)
define(`HOME',``$'FC58')         ; BLANK OUT CURRENT SCROLL WINDOW
                                ; & PUT THE CURSOR IN THE TOP LEFT
                                ; CORNER OF THE WINDOW.  (DOES NOT
                                ; RESET THE WINDOW SIZE.)
define(`RDKEY',``$'FD0C')         ; REQUEST INPUT VIA INPUT HOOK.
define(`KEYIN',``$'FD1B')         ; WAIT FOR INPUT FROM KEYBOARD.
define(`PRBYTE',``$'FDDA')         ; PRINT CONTENTS OF (A) AS HX VAL.
define(`COUT',``$'FDED')         ; ROUTE OUTPUT VIA THE OUTPUT HK.
define(`COUT1',``$'FDF0')         ; MONITOR ROM (TRUE) OUTPUT HNDLR.
define(`SETKBD',``$'FE89')         ; SELECT KEYBOARD AS INPUT DEVICE.
define(`INPORT',``$'FE8B')         ; ENTRY POINT TO SELECT INPUT
                                ; DEVICE OTHER THAN KEYBOARD.
define(`SETVID',``$'FE93')         ; SELECT SCREEN AS OUTPUT DEVICE.
define(`OUTPORT',``$'FE95')         ; ENTRY POINT TO SELECT OUTPUT
                                ; DEVICE OTHER THAN SCREEN.
define(`MONRTS',``$'FF58')         ; AN RTS INSTRUC LOC'D IN MONITOR
                                ; ROM. MANY RELOCATABLE PGMS "JSR"
                                ; TO HERE IN ORDER TO LOAD UP THE
                                ; STACK WITH THE ADDR OF THE "JSR"
                                ; SO THEY CAN FIND OUT THE PRGM'S
                                ; PRESENT LOCATION.
define(`MON',``$'FF65')         ; NORM ENTRY ROUTE TO MONITOR ROM.
                                ; ("CALL -151" GOES HERE.)






                                ; ASCII VALUES (WITH HIGH-BIT SET)
define(`BEL',``$'87') ; bell
define(`CR',``$'8D') ; carriage-return





define(`TRKPERDSK',``$'23')           ; Number of tracks per disk
define(`CATTRK',``$'11')   ; Catalog track is in middle of disk
