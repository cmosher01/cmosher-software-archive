; Apple I BASIC
; Written by Steve Wozniak
;
; Chris Mosher:
; I found two different versions of Apple I BASIC, one
; in the 6502.rom.bin file that came with Ken Wessen's
; version of POM1 emulator. To assemble that version,
; do not define VERS1. The other version I found in a
; disassembly listing from Eric Smith (the author of
; dis6502 disassembler) at
; http://www.brouhaha.com/~eric/retrocomputing/apple/apple1/basic/
; (with some corrections and enhancements by me).
; To assemble that version, define label VERS1.
;VERS1          EQU             1

RESET          EQU     $00
Z1d            EQU     $1d
ch             EQU     $24
cv             EQU     $25
lomem          EQU     $4a
himem          EQU     $4c
rnd            EQU     $4e
noun_stk_l     EQU     $50
syn_stk_h      EQU     $58
noun_stk_h_str EQU     $78
syn_stk_l      EQU     $80
noun_stk_h_int EQU     $a0
txtndxstk      EQU     $a8
text_index     EQU     $c8
leadbl         EQU     $c9
pp             EQU     $ca
pv             EQU     $cc
acc            EQU     $ce
srch           EQU     $d0
tokndxstk      EQU     $d1
srch2          EQU     $d2
if_flag        EQU     $d4
cr_flag        EQU     $d5
current_verb   EQU     $d6
precedence     EQU     $d7
x_save         EQU     $d8
run_flag       EQU     $d9
aux            EQU     $da
pline          EQU     $dc
pverb          EQU     $e0
p1             EQU     $e2
p2             EQU     $e4
p3             EQU     $e6
token_index    EQU     $f1
pcon           EQU     $f2
auto_inc       EQU     $f4
auto_ln        EQU     $f6
auto_flag      EQU     $f8
char           EQU     $f9
leadzr         EQU     $fa
for_nest_c     EQU     $fb
gosub_nest_c   EQU     $fc
synstkdx       EQU     $fd
synpag         EQU     $fe
gstk_pverbl    EQU     $0100
gstk_pverbh    EQU     $0108
gstk_plinel    EQU     $0110
gstk_plineh    EQU     $0118
fstk_varl      EQU     $0120
fstk_varh      EQU     $0128
fstk_stepl     EQU     $0130
fstk_steph     EQU     $0138
fstk_plinel    EQU     $0140
fstk_plineh    EQU     $0148
fstk_pverbl    EQU     $0150
fstk_pverbh    EQU     $0158
fstk_tol       EQU     $0160
fstk_toh       EQU     $0168
buffer         EQU     $0200
KBD            EQU     $d010
KBDCR          EQU     $d011
DSP            EQU     $d012

LDXZ           MACRO ZEROPAGE_LOC
               DB    $BE
               DW    ZEROPAGE_LOC
               ENDM

               ORG     $e000

Pe000          JMP     cold

rdkey          LDA     KBDCR
               BPL     rdkey
               LDA     KBD
               RTS

Se00c          TXA
               AND     #$20
               BEQ     Le034

Se011          LDA     #$a0
               STA     p2
               JMP     cout

Se018          LDA     #$20

Se01a          CMP     ch
               BCS     nextbyte
               LDA     #$8d
               LDY     #$07
Le022          JSR     cout
               LDA     #$a0
               DEY
               BNE     Le022

nextbyte       LDY     #$00
               LDA     (p1),Y
               INC     p1
               BNE     Le034
               INC     p1+1
Le034          RTS

list_comman    JSR     get16bit
               JSR     find_line2
Le03b          LDA     p1
               CMP     p3
               LDA     p1+1
               SBC     p3+1
               BCS     Le034
               JSR     list_line
               JMP     Le03b

list_all       LDA     pp
               STA     p1
               LDA     pp+1
               STA     p1+1
               LDA     himem
               STA     p3
               LDA     himem+1
               STA     p3+1
               BNE     Le03b

list_cmd       JSR     get16bit
               JSR     find_line
               LDA     p2
               STA     p1
               LDA     p2+1
               STA     p1+1
               BCS     Le034

list_line      STX     x_save
               LDA     #$a0
               STA     leadzr
               JSR     nextbyte
               TYA
list_int       STA     p2
               JSR     nextbyte
               TAX
               JSR     nextbyte
               JSR     prdec
Le083          JSR     Se018
               STY     leadzr
               TAX
               BPL     list_token
               ASL     A
               BPL     list_int
               LDA     p2
               BNE     Le095
               JSR     Se011
Le095          TXA
Le096          JSR     cout
Le099          LDA     #$25
               JSR     Se01a
               TAX
               BMI     Le096
               STA     p2
list_token     CMP     #$01
               BNE     Le0ac
               LDX     x_save
               JMP     crout
Le0ac          PHA
               STY     acc
               LDX     #$ed
               STX     acc+1
               CMP     #$51
               BCC     Le0bb
               DEC     acc+1
               SBC     #$50
Le0bb          PHA
               LDA     (acc),Y
Le0be          TAX
               DEY
               LDA     (acc),Y
               BPL     Le0be
               CPX     #$c0
               BCS     Le0cc
               CPX     #$00
               BMI     Le0be
Le0cc          TAX
               PLA
               SBC     #$01
               BNE     Le0bb
               BIT     p2
               BMI     Le0d9
               JSR     Seff8
Le0d9          LDA     (acc),Y
               BPL     Le0ed
               TAX
               AND     #$3f
               STA     p2
               CLC
               ADC     #$a0
               JSR     cout
               DEY
               CPX     #$c0
               BCC     Le0d9
Le0ed          JSR     Se00c
               PLA
               CMP     #$5d
               BEQ     Le099
               CMP     #$28
               BNE     Le083
               BEQ     Le099

paren_substr   JSR     Se118
               STA     noun_stk_l,X
               CMP     noun_stk_h_str,X
Le102          BCC     Le115
string_err     LDY     #$2b
go_errmess_1   JMP     print_err_msg

comma_substr   JSR     getbyte
               CMP     noun_stk_l,X
               BCC     string_err
               JSR     Sefe4
               STA     noun_stk_h_str,X
Le115          JMP     left_paren

Se118          JSR     getbyte
               BEQ     string_err
               SEC
               SBC     #$01
               RTS

str_arr_dest   JSR     Se118
               STA     noun_stk_l,X
               CLC
               SBC     noun_stk_h_str,X
               JMP     Le102
Le12c          LDY     #$14
               BNE     go_errmess_1

dim_str        JSR     Se118
               INX
Le134          LDA     noun_stk_l,X
               STA     aux
               ADC     acc
               PHA
               TAY
               LDA     noun_stk_h_str,X
               STA     aux+1
               ADC     acc+1
               PHA
               CPY     pp
               SBC     pp+1
               BCS     Le12c
               LDA     aux
               ADC     #$fe
               STA     aux
               LDA     #$ff
               TAY
               ADC     aux+1
               STA     aux+1
Le156          INY
               LDA     (aux),Y
               CMP     pv,Y
               BNE     Le16d
               TYA
               BEQ     Le156
Le161          PLA
               STA     (aux),Y
               STA     pv,Y
               DEY
               BPL     Le161
               INX
               RTS
               NOP
Le16d          LDY     #$80
Le16f          BNE     go_errmess_1

input_str      LDA     #$00
               JSR     push_a_noun
               LDY     #$02
               STY     noun_stk_h_str,X
               JSR     push_a_noun
               LDA     #$bf
               JSR     cout
               LDY     #$00
               JSR     read_line
               STY     noun_stk_h_str,X
               NOP
               NOP
               NOP

string_lit     LDA     noun_stk_l+1,X
               STA     acc
               LDA     noun_stk_h_str+1,X
               STA     acc+1
               INX
               INX
               JSR     Se1bc
Le199          LDA     rnd,X
               CMP     syn_stk_h+30,X
               BCS     Le1b4
               INC     rnd,X
               TAY
               LDA     (acc),Y
               LDY     noun_stk_l,X
               CPY     p2
               BCC     Le1ae
               LDY     #$83
               BNE     Le16f
Le1ae          STA     (aux),Y
               INC     noun_stk_l,X
               BCC     Le199
Le1b4          LDY     noun_stk_l,X
               TXA
               STA     (aux),Y
               INX
               INX
               RTS

Se1bc          LDA     noun_stk_l+1,X
               STA     aux
               SEC
               SBC     #$02
               STA     p2
               LDA     noun_stk_h_str+1,X
               STA     aux+1
               SBC     #$00
               STA     p2+1
               LDY     #$00
               LDA     (p2),Y
               CLC
               SBC     aux
               STA     p2
               RTS

string_eq      LDA     noun_stk_l+3,X
               STA     acc
               LDA     noun_stk_h_str+3,X
               STA     acc+1
               LDA     noun_stk_l+1,X
               STA     aux
               LDA     noun_stk_h_str+1,X
               STA     aux+1
               INX
               INX
               INX
               LDY     #$00
               STY     noun_stk_h_str,X
               STY     noun_stk_h_int,X
               INY
               STY     noun_stk_l,X
Le1f3          LDA     himem+1,X
               CMP     syn_stk_h+29,X
               PHP
               PHA
               LDA     rnd+1,X
               CMP     syn_stk_h+31,X
               BCC     Le206
               PLA
               PLP
               BCS     Le205
Le203          LSR     noun_stk_l,X
Le205          RTS
Le206          TAY
               LDA     (acc),Y
               STA     p2
               PLA
               TAY
               PLP
               BCS     Le203
               LDA     (aux),Y
               CMP     p2
               BNE     Le203
               INC     rnd+1,X
               INC     himem+1,X
               BCS     Le1f3

string_neq     JSR     string_eq
               JMP     not_op

mult_op        JSR     Se254
Le225          ASL     acc
               ROL     acc+1
               BCC     Le238
               CLC
               LDA     p3
               ADC     aux
               STA     p3
               LDA     p3+1
               ADC     aux+1
               STA     p3+1
Le238          DEY
               BEQ     Le244
               ASL     p3
               ROL     p3+1
               BPL     Le225
               JMP     Le77e
Le244          LDA     p3
               JSR     push_ya_noun
               LDA     p3+1
               STA     noun_stk_h_int,X
               ASL     p2+1
               BCC     Le279
               JMP     negate

Se254          LDA     #$55
               STA     p2+1
               JSR     Se25b

Se25b          LDA     acc
               STA     aux
               LDA     acc+1
               STA     aux+1
               JSR     get16bit
               STY     p3
               STY     p3+1
               LDA     acc+1
               BPL     Le277
               DEX
               ASL     p2+1
               JSR     negate
               JSR     get16bit
Le277          LDY     #$10
Le279          RTS

mod_op         JSR     See6c
               BEQ     Le244
               DB      $ff
Le280          CMP     #$84
               BNE     Le286
               LSR     auto_flag
Le286          CMP     #$df
               BEQ     Le29b
               CMP     #$9b
               BEQ     Le294
               STA     buffer,Y
               INY
               BPL     read_line
Le294          LDY     #$8b
               JSR     Se3c4

Se299          LDY     #$01
Le29b          DEY
               BMI     Le294

read_line      JSR     rdkey
               NOP
               NOP
               JSR     cout
               CMP     #$8d
               BNE     Le280
               LDA     #$df
               STA     buffer,Y
               RTS
cold           JSR     mem_init_4k
warm           JSR     crout
Le2b6          LSR     run_flag
               LDA     #$be
               JSR     cout
               LDY     #$00
               STY     leadzr
               BIT     auto_flag
               BPL     Le2d1
               LDX     auto_ln
               LDA     auto_ln+1
               JSR     prdec
               LDA     #$a0
               JSR     cout
Le2d1          LDX     #$ff
               TXS
               JSR     read_line
               STY     token_index
               TXA
               STA     text_index
               LDX     #$20
               JSR     Se491
               LDA     text_index
               ADC     #$00
               STA     pverb
               LDA     #$00
               TAX
               ADC     #$02
               STA     pverb+1
               LDA     (pverb,X)
               AND     #$f0
               CMP     #$b0
               BEQ     Le2f9
               JMP     Le883
Le2f9          LDY     #$02
Le2fb          LDA     (pverb),Y
               STA     pv+1,Y
               DEY
               BNE     Le2fb
               JSR     Se38a
               LDA     token_index
               SBC     text_index
               CMP     #$04
               BEQ     Le2b6
               STA     (pverb),Y
               LDA     pp
               SBC     (pverb),Y
               STA     p2
               LDA     pp+1
               SBC     #$00
               STA     p2+1
               LDA     p2
               CMP     pv
               LDA     p2+1
               SBC     pv+1
               BCC     Le36b
Le326          LDA     pp
               SBC     (pverb),Y
               STA     p3
               LDA     pp+1
               SBC     #$00
               STA     p3+1
               LDA     (pp),Y
               STA     (p3),Y
               INC     pp
               BNE     Le33c
               INC     pp+1
Le33c          LDA     p1
               CMP     pp
               LDA     p1+1
               SBC     pp+1
               BCS     Le326
Le346          LDA     p2,X
               STA     pp,X
               DEX
               BPL     Le346
               LDA     (pverb),Y
               TAY
Le350          DEY
               LDA     (pverb),Y
               STA     (p3),Y
               TYA
               BNE     Le350
               BIT     auto_flag
               BPL     Le365
Le35c          LDA     auto_ln+1,X
               ADC     auto_inc+1,X
               STA     auto_ln+1,X
               INX
               BEQ     Le35c
Le365          BPL     Le3e5
               BRK
               DB      $00,$00,$00
Le36b          LDY     #$14
               BNE     print_err_msg

del_comma      JSR     get16bit
               LDA     p1
               STA     p3
               LDA     p1+1
               STA     p3+1
               JSR     find_line1
               LDA     p1
               STA     p2
               LDA     p1+1
               STA     p2+1
               BNE     Le395

del_cmd        JSR     get16bit

Se38a          JSR     find_line
               LDA     p3
               STA     p1
               LDA     p3+1
               STA     p1+1
Le395          LDY     #$00
Le397          LDA     pp
               CMP     p2
               LDA     pp+1
               SBC     p2+1
               BCS     Le3b7
               LDA     p2
               BNE     Le3a7
               DEC     p2+1
Le3a7          DEC     p2
               LDA     p3
               BNE     Le3af
               DEC     p3+1
Le3af          DEC     p3
               LDA     (p2),Y
               STA     (p3),Y
               BCC     Le397
Le3b7          LDA     p3
               STA     pp
               LDA     p3+1
               STA     pp+1
               RTS
Le3c0          JSR     cout
               INY

Se3c4          LDA     error_msg_tbl,Y
               BMI     Le3c0

cout           CMP     #$8d
               BNE     Le3d3

crout          LDA     #$00
               STA     ch
               LDA     #$8d
Le3d3          INC     ch
Le3d5          BIT     DSP
               BMI     Le3d5
               STA     DSP
               RTS
too_long_err   LDY     #$06
print_err_msg  JSR     print_err_msg2
               BIT     run_flag
Le3e5          BMI     Le3ea
               JMP     Le2b6
Le3ea          JMP     Leb9a
Le3ed          ROL     A
               ADC     #$a0
               CMP     buffer,X
               BNE     Le448
               LDA     (synpag),Y
               ASL     A
               BMI     Le400
               DEY
               LDA     (synpag),Y
               BMI     Le428
               INY
Le400          STX     text_index
               TYA
               PHA
               LDX     #$00
               LDA     (synpag,X)
               TAX
Le409          LSR     A
               EOR     #$48
               ORA     (synpag),Y
               CMP     #$c0
               BCC     Le413
               INX
Le413          INY
               BNE     Le409
               PLA
               TAY
               TXA
               JMP     Le4c0

put_token      INC     token_index
               LDX     token_index
               BEQ     too_long_err
               STA     buffer,X
Le425          RTS
Le426          LDX     text_index
Le428          LDA     #$a0
Le42a          INX
               CMP     buffer,X
               BCS     Le42a
               LDA     (synpag),Y
               AND     #$3f
               LSR     A
               BNE     Le3ed
               LDA     buffer,X
               BCS     Le442
               ADC     #$3f
               CMP     #$1a
               BCC     Le4b1
Le442          ADC     #$4f
               CMP     #$0a
               BCC     Le4b1
Le448          LDX     synstkdx
Le44a          INY
               LDA     (synpag),Y
               AND     #$e0
               CMP     #$20
               BEQ     Le4cd
               LDA     txtndxstk,X
               STA     text_index
               LDA     tokndxstk,X
               STA     token_index
Le45b          DEY
               LDA     (synpag),Y
               ASL     A
               BPL     Le45b
               DEY
               BCS     Le49c
               ASL     A
               BMI     Le49c
               LDY     syn_stk_h,X
               STY     synpag+1
               LDY     syn_stk_l,X
               INX
               BPL     Le44a
Le470          BEQ     Le425
               CMP     #$7e
               BCS     Le498
               DEX
               BPL     Le47d
               LDY     #$06
               BPL     go_errmess_2
Le47d          STY     syn_stk_l,X
               LDY     synpag+1
               STY     syn_stk_h,X
               LDY     text_index
               STY     txtndxstk,X
               LDY     token_index
               STY     tokndxstk,X
               AND     #$1f
               TAY
               LDA     syntabl_index,Y

Se491          ASL     A
               TAY
               LDA     #$76
               ROL     A
               STA     synpag+1
Le498          BNE     Le49b
               INY
Le49b          INY
Le49c          STX     synstkdx
               LDA     (synpag),Y
               BMI     Le426
               BNE     Le4a9
               LDY     #$0e
go_errmess_2   JMP     print_err_msg
Le4a9          CMP     #$03
               BCS     Le470
               LSR     A
               LDX     text_index
               INX
Le4b1          LDA     buffer,X
               BCC     Le4ba
               CMP     #$a2
               BEQ     Le4c4
Le4ba          CMP     #$df
               BEQ     Le4c4
               STX     text_index
Le4c0          JSR     put_token
               INY
Le4c4          DEY
               LDX     synstkdx
Le4c7          LDA     (synpag),Y
               DEY
               ASL     A
               BPL     Le49c
Le4cd          LDY     syn_stk_h,X
               STY     synpag+1
               LDY     syn_stk_l,X
               INX
               LDA     (synpag),Y
               AND     #$9f
               BNE     Le4c7
               STA     pcon
               STA     pcon+1
               TYA
               PHA
               STX     synstkdx
               LDY     srch,X
               STY     leadbl
               CLC
Le4e7          LDA     #$0a
               STA     char
               LDX     #$00
               INY
               LDA     buffer,Y
               AND     #$0f
Le4f3          ADC     pcon
               PHA
               TXA
               ADC     pcon+1
               BMI     Le517
               TAX
               PLA
               DEC     char
               BNE     Le4f3
               STA     pcon
               STX     pcon+1
               CPY     token_index
               BNE     Le4e7
               LDY     leadbl
               INY
               STY     token_index
               JSR     put_token
               PLA
               TAY
               LDA     pcon+1
               BCS     Le4c0
Le517          LDY     #$00
               BPL     go_errmess_2

prdec          STA     pcon+1
               STX     pcon
               LDX     #$04
               STX     leadbl
Le523          LDA     #$b0
               STA     char
Le527          LDA     pcon
               CMP     dectabl,X
               LDA     pcon+1
               SBC     dectabh,X
               BCC     Le540
               STA     pcon+1
               LDA     pcon
               SBC     dectabl,X
               STA     pcon
               INC     char
               BNE     Le527
Le540          LDA     char
               INX
               DEX
               BEQ     Le554
               CMP     #$b0
               BEQ     Le54c
               STA     leadbl
Le54c          BIT     leadbl
               BMI     Le554
               LDA     leadzr
               BEQ     Le55f
Le554          JSR     cout
               BIT     auto_flag
               BPL     Le55f
               STA     buffer,Y
               INY
Le55f          DEX
               BPL     Le523
               RTS
dectabl        DB      lo 1, lo 10, lo 100, lo 1000, lo 10000
dectabh        DB      hi 1, hi 10, hi 100, hi 1000, hi 10000

find_line      LDA     pp
               STA     p3
               LDA     pp+1
               STA     p3+1

find_line1     INX

find_line2     LDA     p3+1
               STA     p2+1
               LDA     p3
               STA     p2
               CMP     himem
               LDA     p2+1
               SBC     himem+1
               BCS     Le5ac
               LDY     #$01
               LDA     (p2),Y
               SBC     acc
               INY
               LDA     (p2),Y
               SBC     acc+1
               BCS     Le5ac
               LDY     #$00
               LDA     p3
               ADC     (p2),Y
               STA     p3
               BCC     Le5a0
               INC     p3+1
               CLC
Le5a0          INY
               LDA     acc
               SBC     (p2),Y
               INY
               LDA     acc+1
               SBC     (p2),Y
               BCS     find_line2
Le5ac          RTS

new_cmd        LSR     auto_flag
               LDA     himem
               STA     pp
               LDA     himem+1
               STA     pp+1

clrx           LDA     lomem
               STA     pv
               LDA     lomem+1
               STA     pv+1
               LDA     #$00
               STA     for_nest_c
               STA     gosub_nest_c
               STA     synpag
               LDA     #$00
               STA     Z1d
               RTS
Le5cc          LDA     srch
               ADC     #$05
               STA     srch2
               LDA     tokndxstk
               ADC     #$00
               STA     srch2+1
               LDA     srch2
               CMP     pp
               LDA     srch2+1
               SBC     pp+1
               BCC     Le5e5
               JMP     Le36b
Le5e5          LDA     acc
               STA     (srch),Y
               LDA     acc+1
               INY
               STA     (srch),Y
               LDA     srch2
               INY
               STA     (srch),Y
               LDA     srch2+1
               INY
               STA     (srch),Y
               LDA     #$00
               INY
               STA     (srch),Y
               INY
               STA     (srch),Y
               LDA     srch2
               STA     pv
               LDA     srch2+1
               STA     pv+1
               LDA     srch
               BCC     Le64f
execute_var    STA     acc
               STY     acc+1
               JSR     next_prog_byte
               BMI     Le623
               CMP     #$40
               BEQ     Le623
               JMP     Le628
               DB      $06,$c9,$49,$d0,$07,$a9,$49
Le623          STA     acc+1
               JSR     next_prog_byte
Le628          LDA     lomem+1
               STA     tokndxstk
               LDA     lomem
Le62e          STA     srch
               CMP     pv
               LDA     tokndxstk
               SBC     pv+1
               BCS     Le5cc
               LDA     (srch),Y
               INY
               CMP     acc
               BNE     Le645
               LDA     (srch),Y
               CMP     acc+1
               BEQ     Le653
Le645          INY
               LDA     (srch),Y
               PHA
               INY
               LDA     (srch),Y
               STA     tokndxstk
               PLA
Le64f          LDY     #$00
               BEQ     Le62e
Le653          LDA     srch
               ADC     #$03
               JSR     push_a_noun
               LDA     tokndxstk
               ADC     #$00
               STA     noun_stk_h_str,X
               LDA     acc+1
               CMP     #$40
               BNE     fetch_prg_byte
               DEY
               TYA
               JSR     push_a_noun
               DEY
               STY     noun_stk_h_str,X
               LDY     #$03
Le670          INC     noun_stk_h_str,X
               INY
               LDA     (srch),Y
               BMI     Le670
               BPL     fetch_prg_byte

execute_stmt   LDA     #$00
               STA     if_flag
               STA     cr_flag
               LDX     #$20
push_old_verb  PHA
fetch_prg_byte LDY     #$00
               LDA     (pverb),Y
Le686          BPL     execute_token
               ASL     A
               BMI     execute_var
               JSR     next_prog_byte
               JSR     push_ya_noun
               JSR     next_prog_byte
               STA     noun_stk_h_int,X
Le696          BIT     if_flag
               BPL     Le69b
               DEX
Le69b          JSR     next_prog_byte
               BCS     Le686
execute_token  CMP     #$28
               BNE     execute_verb
               LDA     pverb
               JSR     push_a_noun
               LDA     pverb+1
               STA     noun_stk_h_str,X
               BIT     if_flag
               BMI     Le6bc
               LDA     #$01
               JSR     push_a_noun
               LDA     #$00
               STA     noun_stk_h_str,X
Le6ba          INC     noun_stk_h_str,X
Le6bc          JSR     next_prog_byte
               BMI     Le6ba
               BCS     Le696
execute_verb   BIT     if_flag
               BPL     Le6cd
               CMP     #$04
               BCS     Le69b
               LSR     if_flag
Le6cd          TAY
               STA     current_verb
               LDA     verb_prec_tbl,Y
               AND     #$55
               ASL     A
               STA     precedence
Le6d8          PLA
               TAY
               LDA     verb_prec_tbl,Y
               AND     #$aa
               CMP     precedence
               BCS     do_verb
               TYA
               PHA
               JSR     next_prog_byte
               LDA     current_verb
               BCC     push_old_verb
do_verb        LDA     verb_adr_l,Y
               STA     acc
               LDA     verb_adr_h,Y
               STA     acc+1
               JSR     Se6fc
               JMP     Le6d8

Se6fc          JMP     (acc)

next_prog_byte INC     pverb
               BNE     Le705
               INC     pverb+1
Le705          LDA     (pverb),Y
               RTS

push_ya_noun   STY     syn_stk_h+31,X

push_a_noun    DEX
               BMI     Le710
               STA     noun_stk_l,X
               RTS
Le710          LDY     #$66
go_errmess_3   JMP     print_err_msg

get16bit       LDY     #$00
               LDA     noun_stk_l,X
               STA     acc
               LDA     noun_stk_h_int,X
               STA     acc+1
               LDA     noun_stk_h_str,X
               BEQ     Le731
               STA     acc+1
               LDA     (acc),Y
               PHA
               INY
               LDA     (acc),Y
               STA     acc+1
               PLA
               STA     acc
               DEY
Le731          INX
               RTS

eq_op          JSR     neq_op

not_op         JSR     get16bit
               TYA
               JSR     push_ya_noun
               STA     noun_stk_h_int,X
               CMP     acc
               BNE     Le749
               CMP     acc+1
               BNE     Le749
               INC     noun_stk_l,X
Le749          RTS

neq_op         JSR     subtract
               JSR     sgn_fn

abs_fn         JSR     get16bit
               BIT     acc+1
               BMI     Se772
Le757          DEX
Le758          RTS

sgn_fn         JSR     get16bit
               LDA     acc+1
               BNE     Le764
               LDA     acc
               BEQ     Le757
Le764          LDA     #$ff
               JSR     push_ya_noun
               STA     noun_stk_h_int,X
               BIT     acc+1
               BMI     Le758

negate         JSR     get16bit

Se772          TYA
               SEC
               SBC     acc
               JSR     push_ya_noun
               TYA
               SBC     acc+1
               BVC     Le7a1
Le77e          LDY     #$00
               BPL     go_errmess_3

subtract       JSR     negate

add            JSR     get16bit
               LDA     acc
               STA     aux
               LDA     acc+1
               STA     aux+1
               JSR     get16bit

Se793          CLC
               LDA     acc
               ADC     aux
               JSR     push_ya_noun
               LDA     acc+1
               ADC     aux+1
               BVS     Le77e
Le7a1          STA     noun_stk_h_int,X

unary_pos      RTS

tab_fn         JSR     get16bit
               LDY     acc
               BEQ     Le7b0
               DEY
               LDA     acc+1
               BEQ     Le7bc
Le7b0          RTS

tabout         LDA     ch
               ORA     #$07
               TAY
               INY
Le7b7          LDA     #$a0
               JSR     cout
Le7bc          CPY     ch
               BCS     Le7b7
               RTS

print_com_num  JSR     tabout

print_num      JSR     get16bit
               LDA     acc+1
               BPL     Le7d5
               LDA     #$ad
               JSR     cout
               JSR     Se772
               BVC     print_num
Le7d5          DEY
               STY     cr_flag
               STX     acc+1
               LDX     acc
               JSR     prdec
               LDX     acc+1
               RTS

auto_cmd       JSR     get16bit
               LDA     acc
               STA     auto_ln
               LDA     acc+1
               STA     auto_ln+1
               DEY
               STY     auto_flag
               INY
               LDA     #$0a
Le7f3          STA     auto_inc
               STY     auto_inc+1
               RTS

auto_com       JSR     get16bit
               LDA     acc
               LDY     acc+1
               BPL     Le7f3

var_assign     JSR     get16bit
               LDA     noun_stk_l,X
               STA     aux
               LDA     noun_stk_h_str,X
               STA     aux+1
               LDA     acc
               STA     (aux),Y
               INY
               LDA     acc+1
               STA     (aux),Y
               INX

Te816          RTS

begin_line     PLA
               PLA

colon          BIT     cr_flag
               BPL     Le822

print_cr       JSR     crout

print_semi     LSR     cr_flag
Le822          RTS

left_paren     LDY     #$ff
               STY     precedence

right_paren    RTS

if_stmt        JSR     Sefcd
               BEQ     Le834
               LDA     #$25
               STA     current_verb
               DEY
               STY     if_flag
Le834          INX
               RTS
run_warm       LDA     pp
               LDY     pp+1
               BNE     Le896

gosub_stmt     LDY     #$41
               LDA     gosub_nest_c
               CMP     #$08
               BCS     go_errmess_4
               TAY
               INC     gosub_nest_c
               LDA     pverb
               STA     gstk_pverbl,Y
               LDA     pverb+1
               STA     gstk_pverbh,Y
               LDA     pline
               STA     gstk_plinel,Y
               LDA     pline+1
               STA     gstk_plineh,Y

goto_stmt      JSR     get16bit
               JSR     find_line
               BCC     Le867
               LDY     #$37
               BNE     go_errmess_4
Le867          LDA     p2
               LDY     p2+1
run_loop       STA     pline
               STY     pline+1
               BIT     KBDCR
               BMI     Le8c3
               CLC
               ADC     #$03
               BCC     Le87a
               INY
Le87a          LDX     #$ff
               STX     run_flag
               TXS
               STA     pverb
               STY     pverb+1
Le883          JSR     execute_stmt
               BIT     run_flag
               BPL     end_stmt
               CLC
               LDY     #$00
               LDA     pline
               ADC     (pline),Y
               LDY     pline+1
               BCC     Le896
               INY
Le896          CMP     himem
               BNE     run_loop
               CPY     himem+1
               BNE     run_loop
               LDY     #$34
               LSR     run_flag
go_errmess_4   JMP     print_err_msg

return_stmt    LDY     #$4a
               LDA     gosub_nest_c
               BEQ     go_errmess_4
               DEC     gosub_nest_c
               TAY
               LDA     gstk_plinel-1,Y
               STA     pline
               LDA     gstk_plineh-1,Y
               STA     pline+1
               LDXZ    synpag+1,Y
               LDA     gstk_pverbh-1,Y
Le8be          TAY
               TXA
               JMP     Le87a
Le8c3          LDY     #$63
               JSR     Se3c4
               LDY     #$01
               LDA     (pline),Y
               TAX
               INY
               LDA     (pline),Y
               JSR     prdec

end_stmt       JMP     warm
Le8d6          DEC     for_nest_c

next_stmt      LDY     #$5b
               LDA     for_nest_c
Le8dc          BEQ     go_errmess_4
               TAY
               LDA     noun_stk_l,X
               CMP     fstk_varl-1,Y
               BNE     Le8d6
               LDA     noun_stk_h_str,X
               CMP     fstk_varh-1,Y
               BNE     Le8d6
               LDA     fstk_stepl-1,Y
               STA     aux
               LDA     fstk_steph-1,Y
               STA     aux+1
               JSR     get16bit
               DEX
               JSR     Se793
               JSR     var_assign
               DEX
               LDY     for_nest_c
               LDA     fstk_toh-1,Y
               STA     syn_stk_l+31,X
               LDA     fstk_tol-1,Y
               LDY     #$00
               JSR     push_ya_noun
               JSR     subtract
               JSR     sgn_fn
               JSR     get16bit
               LDY     for_nest_c
               LDA     acc
               BEQ     Le925
               EOR     fstk_steph-1,Y
               BPL     Le937
Le925          LDA     fstk_plinel-1,Y
               STA     pline
               LDA     fstk_plineh-1,Y
               STA     pline+1
               LDX     fstk_pverbl-1,Y
               LDA     fstk_pverbh-1,Y
               BNE     Le8be
Le937          DEC     for_nest_c
               RTS

for_stmt       LDY     #$54
               LDA     for_nest_c
               CMP     #$08
               BEQ     Le8dc
               INC     for_nest_c
               TAY
               LDA     noun_stk_l,X
               STA     fstk_varl,Y
               LDA     noun_stk_h_str,X
               STA     fstk_varh,Y
               RTS

to_clause      JSR     get16bit
               LDY     for_nest_c
               LDA     acc
               STA     fstk_tol-1,Y
               LDA     acc+1
               STA     fstk_toh-1,Y
               LDA     #$01
               STA     fstk_stepl-1,Y
               LDA     #$00
Le966          STA     fstk_steph-1,Y
               LDA     pline
               STA     fstk_plinel-1,Y
               LDA     pline+1
               STA     fstk_plineh-1,Y
               LDA     pverb
               STA     fstk_pverbl-1,Y
               LDA     pverb+1
               STA     fstk_pverbh-1,Y
               RTS

Te97e          JSR     get16bit
               LDY     for_nest_c
               LDA     acc
               STA     fstk_stepl-1,Y
               LDA     acc+1
               JMP     Le966
               DB      $00,$00,$00,$00,$00,$00,$00,$00
               DB      $00,$00,$00
verb_prec_tbl  DB      $00,$00,$00,$ab,$03,$03,$03,$03
               DB      $03,$03,$03,$03,$03,$03,$03,$03
               DB      $03,$03,$3f,$3f,$c0,$c0,$3c,$3c
               DB      $3c,$3c,$3c,$3c,$3c,$30,$0f,$c0
               DB      $cc,$ff,$55,$00,$ab,$ab,$03,$03
               DB      $ff,$ff,$55,$ff,$ff,$55,$cf,$cf
               DB      $cf,$cf,$cf,$ff,$55,$c3,$c3,$c3
               DB      $55,$f0,$f0,$cf,$56,$56,$56,$55
               DB      $ff,$ff,$55,$03,$03,$03,$03,$03
               DB      $03,$03,$ff,$ff,$ff,$03,$03,$03
               DB      $03,$03,$03,$03,$03,$03,$03,$03
               DB      $03,$03,$03,$03,$03,$00,$ab,$03
               DB      $57,$03,$03,$03,$03,$07,$03,$03
               DB      $03,$03,$03,$03,$03,$03,$03,$03
               DB      $03,$03,$aa,$ff,$ff,$ff,$ff,$ff
verb_adr_l     DB      $17,$ff,$ff,$19,$5d,$35,$4b,$f2
               DB      $ec,$87,$6f,$ad,$b7,$e2,$f8,$54
               DB      $80,$96,$85,$82,$22,$10,$33,$4a
               DB      $13,$06,$0b,$4a,$01,$40,$47,$7a
               DB      $00,$ff,$23,$09,$5b,$16,$b6,$cb
               DB      $ff,$ff,$fb,$ff,$ff,$24,$f6,$4e
               DB      $59,$50,$00,$ff,$23,$a3,$6f,$36
               DB      $23,$d7,$1c,$22,$c2,$ae,$ba,$23
               DB      $ff,$ff,$21,$30,$1e,$03,$c4,$20
               DB      $00,$c1,$ff,$ff,$ff,$a0,$30,$1e
               DB      $a4,$d3,$b6,$bc,$aa,$3a,$01,$50
               DB      $7e,$d8,$d8,$a5,$3c,$ff,$16,$5b
               DB      $28,$03,$c4,$1d,$00,$0c,$4e,$00
               DB      $3e,$00,$a6,$b0,$00,$bc,$c6,$57
               DB      $8c,$01,$27,$ff,$ff,$ff,$ff,$ff
verb_adr_h     DB      $e8,$ff,$ff,$e8,$e0,$e0,$e0,$ef
               DB      $ef,$e3,$e3,$e5,$e5,$e7,$e7,$ee
               DB      $ef,$ef,$e7,$e7,$e2,$ef,$e7,$e7
               DB      $ec,$ec,$ec,$e7,$ec,$ec,$ec,$e2
               DB      $00,$ff,$e8,$e1,$e8,$e8,$ef,$eb
               DB      $ff,$ff,$e0,$ff,$ff,$ef,$ee,$ef
               DB      $e7,$e7,$00,$ff,$e8,$e7,$e7,$e7
               DB      $e8,$e1,$e2,$ee,$ee,$ee,$ee,$e8
               DB      $ff,$ff,$e1,$e1,$ef,$ee,$e7,$e8
               DB      $ee,$e7,$ff,$ff,$ff,$ee,$e1,$ef
               DB      $e7,$e8,$ef,$ef,$eb,$e9,$e8,$e9
               DB      $e9,$e8,$e8,$e8,$e8,$ff,$e8,$e8
               DB      $e8,$ee,$e7,$e8,$ef,$ef,$ee,$ef
               DB      $ee,$ef,$ee,$ee,$ef,$ee,$ee,$ee
               DB      $e1,$e8,$e8,$ff,$ff,$ff,$ff,$ff

error_msg_tbl
               CMAP    " ",160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191
               CMAP    "@",192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223
               CMAP    "`",224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255
               DB      ">3276","7"&$7F
               DB      "TOO LON","G"&$7F
               DB      "SYNTA","X"&$7F
               DB      "MEM FUL","L"&$7F
               DB      "TOO MANY PAREN","S"&$7F
               DB      "STRIN","G"&$7F
               DB      "NO EN","D"&$7F
               DB      "BAD BRANC","H"&$7F
               DB      ">8 GOSUB","S"&$7F
               DB      "BAD RETUR","N"&$7F
               DB      ">8 FOR","S"&$7F
               DB      "BAD NEX","T"&$7F
               DB      "STOPPED AT"," "&$7F
               DB      "***"," "&$7F
               DB      " ERR",$8D&$7F
               DB      ">25","5"&$7F
               DB      "RANG","E"&$7F
               DB      "DI","M"&$7F
               DB      "STR OVF","L"&$7F
               DB      "\\",$8D&$7F
               DB      "RETYPE LINE",$8D,"?"&$7F
               CMAP

Leb9a          LSR     run_flag
               BCC     Leba1
               JMP     Le8c3
Leba1          LDX     acc+1
               TXS
               LDX     acc
               LDY     #$8d
               BNE     Lebac

input_num_stmt LDY     #$99
Lebac          JSR     Se3c4
               STX     acc
               TSX
               STX     acc+1
               LDY     #$fe
               STY     run_flag
               INY
               STY     text_index
               JSR     Se299
               STY     token_index
               LDX     #$20
               LDA     #$30
               JSR     Se491
               INC     run_flag
               LDX     acc

input_num_cma  LDY     text_index
               ASL     A
Lebce          STA     acc
               INY
               LDA     buffer,Y
               CMP     #$74
               BEQ     input_num_stmt
               EOR     #$b0
               CMP     #$0a
               BCS     Lebce
               INY
               INY
               STY     text_index
               LDA     buffer,Y
               PHA
               LDA     buffer-1,Y
               LDY     #$00
               JSR     push_ya_noun
               PLA
               STA     noun_stk_h_int,X
               LDA     acc
               CMP     #$c7
               BNE     Lebfa
               JSR     negate
Lebfa          JMP     var_assign
               DB      $ff,$ff,$ff,$50

Tec01          JSR     Tec13
               BNE     Lec1b

Tec06          JSR     Tec0b
               BNE     Lec1b

Tec0b          JSR     subtract
               JSR     negate
               BVC     Lec16

Tec13          JSR     subtract
Lec16          JSR     sgn_fn
               LSR     noun_stk_l,X
Lec1b          JMP     not_op
               DB      $ff,$ff
syntabl_index  DB      $c1,$ff,$7f,$d1,$cc,$c7,$cf,$ce
               DB      $c5,$9a,$98,$8b,$96,$95,$93,$bf
               DB      $b2,$32,$2d,$2b,$bc,$b0,$ac,$be
               DB      $35,$8e,$61,$ff,$ff,$ff,$dd,$fb

Tec40          JSR     Sefc9
               ORA     rnd+1,X
               BPL     Lec4c

Tec47          JSR     Sefc9
               AND     rnd+1,X
Lec4c          STA     noun_stk_l,X
               BPL     Lec1b
               JMP     Sefc9
               DB      $40,$60,$8d,$60,$8b,$00,$7e,$8c
               DB      $33,$00,$00,$60,$03,$bf,$12,$00
               DB      $40,$89,$c9,$47,$9d,$17,$68,$9d
               DB      $0a,$00,$40,$60,$8d,$60,$8b,$00
               DB      $7e,$8c,$3c,$00,$00,$60,$03,$bf
               DB      $1b,$4b,$67,$b4,$a1,$07,$8c,$07
               DB      $ae,$a9,$ac,$a8,$67,$8c,$07,$b4
               DB      $af,$ac,$b0,$67,$9d,$b2,$af,$ac
               DB      $af,$a3,$67,$8c,$07,$a5,$ab,$af
               DB      $b0,$f4,$ae,$a9,$b2,$b0,$7f,$0e
               DB      $27,$b4,$ae,$a9,$b2,$b0,$7f,$0e
               DB      $28,$b4,$ae,$a9,$b2,$b0,$64,$07
               DB      $a6,$a9,$67,$af,$b4,$af,$a7,$78
               DB      $b4,$a5,$ac,$78,$7f,$02,$ad,$a5
               DB      $b2,$67,$a2,$b5,$b3,$af,$a7,$ee
               DB      $b2,$b5,$b4,$a5,$b2,$7e,$8c,$39
               DB      $b4,$b8,$a5,$ae,$67,$b0,$a5,$b4
               DB      $b3,$27,$af,$b4,$07,$9d,$19,$b2
               DB      $af,$a6,$7f,$05,$37,$b4,$b5,$b0
               DB      $ae,$a9,$7f,$05,$28,$b4,$b5,$b0
               DB      $ae,$a9,$7f,$05,$2a,$b4,$b5,$b0
               DB      $ae,$a9,$e4,$ae,$a5,$00,$ff,$ff
syntabl2       DB      $47,$a2,$a1,$b4,$7f,$0d,$30,$ad
               DB      $a9,$a4,$7f,$0d,$23,$ad,$a9,$a4
               DB      $67,$ac,$ac,$a1,$a3,$00,$40,$80
               DB      $c0,$c1,$80,$00,$47,$8c,$68,$8c
               DB      $db,$67,$9b,$68,$9b,$50,$8c,$63
               DB      $8c,$7f,$01,$51,$07,$88,$29,$84
               DB      $80,$c4,$80,$57,$71,$07,$88,$14
               DB      $ed,$a5,$ad,$af,$ac,$ed,$a5,$ad
               DB      $a9,$a8,$f2,$af,$ac,$af,$a3,$71
               DB      $08,$88,$ae,$a5,$ac,$68,$83,$08
               DB      $68,$9d,$08,$71,$07,$88,$60,$76
               DB      $b4,$af,$ae,$76,$8d,$76,$8b,$51
               DB      $07,$88,$19,$b8,$a4,$ae,$b2,$f2
               DB      $b3,$b5,$f3,$a2,$a1,$ee,$a7,$b3
               DB      $e4,$ae,$b2,$eb,$a5,$a5,$b0,$51
               DB      $07,$88,$39,$81,$c1,$4f,$7f,$0f
               DB      $2f,$00,$51,$06,$88,$29,$c2,$0c
               DB      $82,$57,$8c,$6a,$8c,$42,$ae,$a5
               DB      $a8,$b4,$60,$ae,$a5,$a8,$b4,$4f
               DB      $7e,$1e,$35,$8c,$27,$51,$07,$88
               DB      $09,$8b,$fe,$e4,$af,$ad,$f2,$af
               DB      $e4,$ae,$a1,$dc,$de,$9c,$dd,$9c
               DB      $de,$dd,$9e,$c3,$dd,$cf,$ca,$cd
               DB      $cb,$00,$47,$9d,$ad,$a5,$ad,$af
               DB      $ac,$76,$9d,$ad,$a5,$ad,$a9,$a8
               DB      $e6,$a6,$af,$60,$8c,$20,$af,$b4
               DB      $b5,$a1,$f2,$ac,$a3,$f2,$a3,$b3
               DB      $60,$8c,$20,$ac,$a5,$a4,$ee,$b5
               DB      $b2,$60,$ae,$b5,$b2,$f4,$b3,$a9
               DB      $ac,$60,$8c,$20,$b4,$b3,$a9,$ac
               DB      $7a,$7e,$9a,$22,$20,$00,$60,$03
               DB      $bf,$60,$03,$bf,$1f

print_str_cma  JSR     tabout

print_str      INX
               INX
               LDA     rnd+1,X
               STA     aux
               LDA     syn_stk_h+31,X
               STA     aux+1
               LDY     rnd,X
Lee0f          TYA
               CMP     syn_stk_h+30,X
               BCS     Lee1d
               LDA     (aux),Y
               JSR     cout
               INY
               JMP     Lee0f
Lee1d          LDA     #$ff
               STA     cr_flag
               RTS

len_fn         INX
               LDA     #$00
               STA     noun_stk_h_str,X
               STA     noun_stk_h_int,X
               LDA     syn_stk_h+31,X
               SEC
               SBC     rnd+1,X
               STA     noun_stk_l,X
               JMP     left_paren
               DB      $ff

getbyte        JSR     get16bit
               LDA     acc+1
               BNE     gr_255_err
               LDA     acc
               RTS

plot_comma     JSR     getbyte
               LDY     text_index
               CMP     #$30
               BCS     range_err
               CPY     #$28
               BCS     range_err
               RTS
               NOP
               NOP

Tee4e          JSR     getbyte
               RTS
               NOP
               IF VERS1
               NOP

man_cmd        LSR     auto_flag
               RTS

vtab_stmt      JSR     getbyte
               CMP     #$18
               BCS     range_err
               STA     cv
               RTS
               NOP
               NOP
               ELSE
Lee53          TXA
               LDX     #$01
Lee56          LDY     acc,X
               STY     himem,X
               LDY     $48,X
               STY     pp,X
               DEX
               BEQ     Lee56
               TAX
               RTS
               ENDIF
gr_255_err     LDY     #$77
go_errmess_5   JMP     print_err_msg
range_err      LDY     #$7b
               BNE     go_errmess_5

See6c          JSR     Se254
               LDA     aux
               BNE     Lee7a
               LDA     aux+1
               BNE     Lee7a
               JMP     Le77e
Lee7a          ASL     acc
               ROL     acc+1
               ROL     p3
               ROL     p3+1
               LDA     p3
               CMP     aux
               LDA     p3+1
               SBC     aux+1
               BCC     Lee96
               STA     p3+1
               LDA     p3
               SBC     aux
               STA     p3
               INC     acc
Lee96          DEY
               BNE     Lee7a
               RTS
               DB      $ff,$ff,$ff,$ff,$ff,$ff

call_stmt      JSR     get16bit
               JMP     (acc)
Leea6
               IF VERS1
               DB      $20,$34,$ee,$c5,$c8,$90,$bb,$85

Teeae          LDA     himem+1

Teeb0          PHA
               LDA     himem
               JSR     push_ya_noun
               PLA
               STA     noun_stk_h_int,X
               RTS

Teeba          LDA     lomem+1

Teebc          PHA
               LDA     lomem
               JMP     Lefb3
bogus_eec2     DB      $a5,$85,$2d,$60

Teec6          JSR     getbyte
               ELSE
               LDA     himem
               BNE     Leeac
               DEC     himem+1
Leeac          DEC     himem
               LDA     $48
               BNE     Leeb4
               DEC     $48+1
Leeb4          DEC     $48
Leeb6          LDY     #$00
               LDA     (himem),Y
               STA     ($48),Y
               LDA     pp
               CMP     himem
               LDA     pp+1
               SBC     himem+1
               BCC     Leea6
               JMP     Lee53
               ENDIF

               CMP     #$28
Leecb          BCS     range_err
               TAY
               LDA     text_index
               RTS
               NOP
               NOP

print_err_msg2 TYA
               TAX
               LDY     #$6e
               JSR     Se3c4
               TXA
               TAY
               JSR     Se3c4
               LDY     #$72
               JMP     Se3c4

Seee4          JSR     get16bit
Leee7          ASL     acc
               ROL     acc+1
               BMI     Leee7
               BCS     Leecb
               BNE     Leef5
               CMP     acc
               BCS     Leecb
Leef5          RTS

peek_fn        JSR     get16bit
               LDA     (acc),Y
               STY     syn_stk_l+31,X
               JMP     push_ya_noun

poke_stmt      JSR     getbyte
               LDA     acc
               PHA
               JSR     get16bit
               PLA
               STA     (acc),Y

Tef0c          RTS
               DB      $ff,$ff,$ff

divide         JSR     See6c
               LDA     acc
               STA     p3
               LDA     acc+1
               STA     p3+1
               JMP     Le244

dim_num        JSR     Seee4
               JMP     Le134

num_array_subs JSR     Seee4
               LDY     noun_stk_h_str,X
               LDA     noun_stk_l,X
               ADC     #$fe
               BCS     Lef30
               DEY
Lef30          STA     aux
               STY     aux+1
               CLC
               ADC     acc
               STA     noun_stk_l,X
               TYA
               ADC     acc+1
               STA     noun_stk_h_str,X
               LDY     #$00
               LDA     noun_stk_l,X
               CMP     (aux),Y
               INY
               LDA     noun_stk_h_str,X
               SBC     (aux),Y
               BCS     Leecb
               JMP     left_paren

rnd_fn         JSR     get16bit
               LDA     rnd
               JSR     push_ya_noun
               LDA     rnd+1
               BNE     Lef5e
               CMP     rnd
               ADC     #$00
Lef5e          AND     #$7f
               STA     rnd+1
               STA     noun_stk_h_int,X
               LDY     #$11
Lef66          LDA     rnd+1
               ASL     A
               CLC
               ADC     #$40
               ASL     A
               ROL     rnd
               ROL     rnd+1
               DEY
               BNE     Lef66
               LDA     acc
               JSR     push_ya_noun
               LDA     acc+1
               STA     noun_stk_h_int,X
               JMP     mod_op

Tef80          JSR     get16bit
               LDY     acc
               IF VERS1
               CPY     lomem
               ELSE
               CPY     himem
               ENDIF
               LDA     acc+1
               IF VERS1
               SBC     lomem+1
               ELSE
               SBC     himem+1
               ENDIF
               BCC     Lefab
               IF VERS1
               STY     himem
               LDA     acc+1
               STA     himem+1
Lef93          JMP     new_cmd
               ELSE
               STY     $48
               LDA     acc+1
               STA     $48+1
Lef93          JMP     Leeb6
               ENDIF

Tef96          JSR     get16bit
               LDY     acc
               IF VERS1
               CPY     himem
               ELSE
               CPY     pp
               ENDIF
               LDA     acc+1
               IF VERS1
               SBC     himem+1
               ELSE
               SBC     pp+1
               ENDIF
               BCS     Lefab
               STY     lomem
               LDA     acc+1
               STA     lomem+1

               IF VERS1
               BCC     Lef93
               ELSE
               JMP     clrx
               ENDIF
Lefab          JMP     Leecb
               IF VERS1
               DB      $a5,$4d,$48,$a5,$4c
               ELSE
               NOP
               NOP
               NOP
               NOP
               ENDIF

Lefb3          JSR     Sefc9

string_input   JSR     input_str
               JMP     Lefbf

input_prompt   JSR     print_str
Lefbf          LDA     #$ff
               STA     text_index
               LDA     #$74
               STA     buffer
               RTS

Sefc9          JSR     not_op
               INX

Sefcd          JSR     not_op
               LDA     noun_stk_l,X
               RTS

mem_init_4k    LDA     #$00
               STA     lomem
               STA     himem
               LDA     #$08
               STA     lomem+1
               LDA     #$10
               STA     himem+1
               JMP     new_cmd

Sefe4          CMP     noun_stk_h_str,X
               BNE     Lefe9
               CLC
Lefe9          JMP     Le102

Tefec          JSR     clrx
               JMP     run_warm

Teff2          JSR     clrx
               JMP     goto_stmt

Seff8          CPX     #$80
               BNE     Leffd
               DEY
Leffd          JMP     Se00c
