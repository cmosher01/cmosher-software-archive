function ChrisMosherUtilInternalTestClass() { }

$(function() {

	module("Util");

	test("forEach nominal", function() {
		var r, rr;

		r = ["a","b","c"];

		rr = [];
		Util.forEach(r,function(v) {
			rr.push(v);
		});

		deepEqual(rr,r);
	});

	test("forEach null", function() {
		var r, rr;

		r = ["a",null,"c"];

		rr = [];
		Util.forEach(r,function(v) {
			rr.push(v);
		});

		deepEqual(rr,r);
	});

	test("forEach deleted", function() {
		var r, rr;

		r = ["a","b","c"];
		delete r[1];

		rr = [];
		Util.forEach(r,function(v) {
			rr.push(v);
		});

		deepEqual(rr,["a","c"]);
	});

	test("forEach sparse", function() {
		var r, rr;

		r = [];
		r[0] = "a";
		r[10000] = "b";

		rr = [];
		Util.forEach(r,function(v) {
			rr.push(v);
		});

		deepEqual(rr,["a","b"]);
	});


	test("forEach object property", function() {
		var obj;
		obj = {
			a: "a",
			b: "b",
		};
		rr = [];
		Util.forEach(obj,function(v) {
			rr.push(v);
		});

		ok((rr[0]=="a"&&rr[1]=="b") || (rr[0]=="b"&&rr[1]=="a"));
	});




	test("consolodate nominal", function() {
		var r, rr;

		r = ["a","b","c"];
		delete r[1];

		rr = Util.consolodate(r);
		deepEqual(rr,["a","c"]);
	});





	test("remove nominal", function() {
		var r;

		r = ["a","b","c"];
		delete r[1];
		notDeepEqual(r,["a","c"]);
		deepEqual(r,["a",Util.undefined(),"c"]);

		r = ["a","b","c"];
		r = Util.remove("b",r);
		deepEqual(r,["a","c"]);
		notDeepEqual(r,["a",Util.undefined(),"c"]);
	});




	test("class name of classic OO object", function() {
		equal(Util.getTypeName(new ChrisMosherUtilInternalTestClass()),"ChrisMosherUtilInternalTestClass");
	});

	test("class name of Object", function() {
		equal(Util.getTypeName(new Object()),"Object");
	});

	test("class name of String", function() {
		equal(Util.getTypeName(new String("testing")),"String");
	});

	test("class name of string", function() {
		equal(Util.getTypeName("testing"),"String");
	});

	test("class name of Array", function() {
		equal(Util.getTypeName(new Array(1,2,3)),"Array");
	});

	test("class name of array", function() {
		equal(Util.getTypeName([1,2,3]),"Array");
	});

	test("class name of number", function() {
		equal(Util.getTypeName(new Number(3.14)),"Number");
	});

	test("class name of number", function() {
		equal(Util.getTypeName(3.14),"Number");
	});

	test("class name of number property", function() {
		equal(Util.getTypeName(window.length),"Number");
	});

	test("class name of Boolean", function() {
		equal(Util.getTypeName(new Boolean(true)),"Boolean");
	});

	test("class name of boolean", function() {
		equal(Util.getTypeName(true),"Boolean");
	});

	test("class name of null", function() {
		equal(Util.getTypeName(null),"null");
	});

	test("class name of undefined", function() {
		equal(Util.getTypeName(Util.undefined()),"undefined");
	});

	test("class name of omitted argument", function() {
		equal(Util.getTypeName(),"undefined");
	});

	test("class name of castrated object", function() {
		var x;
		x = new ChrisMosherUtilInternalTestClass();
		x.constructor = null;
		equal(Util.getTypeName(x),"Object");
	});

	test("class name of corrupted object", function() {
		var x;
		x = new ChrisMosherUtilInternalTestClass();
		x.constructor = {foo:"bar"};
		equal(Util.getTypeName(x),"Object");
	});

	test("class name of corrupted object 2", function() {
		var x;
		x = new ChrisMosherUtilInternalTestClass();
		x.constructor = [1,2,3];
		equal(Util.getTypeName(x),"Object");
	});

	test("class name of Date", function() {
		equal(Util.getTypeName(new Date()),"Date");
	});

	test("class name of RegExp literal", function() {
		equal(Util.getTypeName(new RegExp(/.*/g)),"RegExp");
	});

	test("class name of regexp literal", function() {
		equal(Util.getTypeName(/.*/g),"RegExp");
	});

	test("class name of function object", function() {
		equal(Util.getTypeName(function(){}),"Function");
	});

	test("class name of castrated function object", function() {
		var x = function(){};
		x.constructor = null;
		equal(Util.getTypeName(x),"Function");
	});

	test("class name of castrated regexp", function() {
		var x = /.*/g;
		x.constructor = null;
		equal(Util.getTypeName(x),"RegExp");
	});

	test("class name of Object type", function() {
		equal(Util.getTypeName(Object),"Function");
	});

	test("class name of Math type", function() {
		equal(Util.getTypeName(Math),"Math");
	});

	test("class name of Date type", function() {
		equal(Util.getTypeName(Date),"Function");
	});

	test("class name of window", function() {
		equal(Util.getTypeName(window),"Window");
	});

	test("class name of malicious corruption", function() {
		var x = new ChrisMosherUtilInternalTestClass();
		x.constructor = {name:"Foo"};
		equal(Util.getTypeName(x),"Foo"); // can't fix this?
	});

	test("class name of arguments", function() {
		equal(Util.getTypeName(arguments),"Arguments");
	});

	test("class name of callee", function() {
		equal(Util.getTypeName(arguments.callee),"Function");
	});

	test("safestr nominal", function() {
		equal(Util.safeStr("Chris"),"Chris");
	});

	test("safestr undefined", function() {
		equal(Util.safeStr(Util.undefined()),"");
	});

	test("safestr missing", function() {
		equal(Util.safeStr(),"");
	});

	test("safestr nominal", function() {
		equal(Util.safeStr(null),"");
	});


	test("digint nominal", function() {
		equal(Util.digint(68,3),"068");
	});

	test("digint none added", function() {
		equal(Util.digint(68,2),"68");
	});

	test("digint too big", function() {
		equal(Util.digint(68,1),"68");
	});

	test("digint multi-digit zero", function() {
		equal(Util.digint(0,7),"0000000");
	});

	test("digint zero", function() {
		equal(Util.digint(0,1),"0");
	});

	test("digint negative nominal", function() {
		equal(Util.digint(-27,5),"-00027");
	});

	test("digint fractional", function() {
		equal(Util.digint(-27.47,5),"-00027");
	});

	test("digint fractional round up", function() {
		equal(Util.digint(-27.58,5),"-00028");
	});

	test("undefined()", function() {
		equal(typeof Util.undefined(),"undefined");
	});

	test("NaN()", function() {
		equal(typeof Util.NaN(),"number");
		ok(isNaN(Util.NaN()));
	});

	test("Infinity()", function() {
		equal(typeof Util.Infinity(),"number");
		equal(Util.Infinity(),1/0);
	});
});
