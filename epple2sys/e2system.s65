;    Epple ][ System Demo ROM
;    Copyright (C) 2009 by Chris Mosher <chris@mosher.mine.nu>
;
;    This program is free software: you can redistribute it and/or modify
;    it under the terms of the GNU General Public License as published by
;    the Free Software Foundation, either version 3 of the License, or
;    (at your option) any later version.
;
;    This program is distributed in the hope that it will be useful,
;    but WITHOUT ANY WARRANTY, without even the implied warranty of
;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
;    GNU General Public License for more details.
;
;    You should have received a copy of the GNU General Public License
;    along with this program. If not, see <http://www.gnu.org/licenses/>.
;
;
;
            .FEATURE LABELS_WITHOUT_COLONS

            .INCLUDE "hascmap.s65"
;
;
;
; constants
SCREENWID   = 40
SCREENHGT   = 24
PROMPT      = '$'
;
;
;
; ASCII (high it set)
BS          = $88
CR          = $8D
SPACE       = ' '
;
;
;
; zero page addresses
TMPW        = $00 ; $01
ADDR        = $02 ; $03
ADDR2       = $04 ; $05
TEXTROW     = $06 ; $07
TMP         = $08
COL         = $09
ROW         = $0A
INBUFC      = $0B
;
;
;
; page 2 (input buffer)
INBUF       = $0200
;
;
;
; I/O addresses ($C0xx)
READKEY     = $C000
CLEARKEY    = $C010
TEXTON      = $C051
PAGE2OFF    = $C054







;
;
;
; RESET
; Handles power-on or reset-button-press.
; Initializes CPU, screen; displays welcome message;
; invokes the shell.
;
.PROC       RESET
            NOP
            SEI
            CLD
            LDX #$FF
            TXS

            LDA TEXTON
            LDA PAGE2OFF


            JSR ENDSCR
            JSR ADVCUR
            JSR WELCOME
            JMP SHELL
.ENDPROC
;
;
;
; LINEADDR
; Computes address of column 0 for text line
; (0-23) given in A, into TEXTROW.
; input:
;  A        000edcba
; output:
;  TEXTROW  aeded000 000001cb
; scratch:
;  X
;
.PROC       LINEADDR
            TAX
            LDA #$04
            STA TEXTROW+1
            TXA
            LSR
            AND #$03
            ORA TEXTROW+1
            STA TEXTROW+1

            BCC ZERO
            LDA #$80
            BNE STORELOW
ZERO        LDA #$00
STORELOW    STA TEXTROW
            TXA
            AND #$18
            TAX
            ORA TEXTROW
            STA TEXTROW
            TXA
            ASL
            ASL
            ORA TEXTROW
            STA TEXTROW
            RTS
.ENDPROC
;
;
;
; CHARADDR
; Computes address of character at ROW,COL
; for use as STA (TEXTROW),Y
; input: ROW, COL
; output: TEXTROW, Y
; scratch: A,X
;
.PROC       CHARADDR
            LDA ROW
            JSR LINEADDR
            LDY COL
            RTS
.ENDPROC
;
;
;
; HOME
; Moves cursor to top left.
; output: ROW, COL
; scratch: A
;
.PROC       HOME
            LDA #0
            STA ROW
            STA COL
            RTS
.ENDPROC
;
;
;
; ENDSCR
; Moves cursor to bottom right.
; output: ROW, COL
; scratch: A
;
.PROC       ENDSCR
            LDA #SCREENHGT-1
            STA ROW
            LDA #SCREENWID-1
            STA COL
            RTS
.ENDPROC
;
;
;
; SCROLL
; Scrolls the entire screen up one line
; scratch: A. Y, X, TMP, TMPW, TEXTROW
;
.PROC       SCROLL
            LDA #0
            STA TMP ; row

LOOPROW     LDA TMP
            JSR LINEADDR
            LDA TEXTROW
            STA TMPW
            LDA TEXTROW+1
            STA TMPW+1
            INC TMP
            LDA TMP
            JSR LINEADDR

            LDY #SCREENWID-1
LOOPCOL     LDA (TEXTROW),Y
            STA (TMPW),Y
            DEY
            BPL LOOPCOL

            LDA TMP
            CMP #SCREENHGT-1
            BNE LOOPROW

            RTS
.ENDPROC
;
;
;
; CLEARLINE
; Clears line given by A
; input: A
; scratch: X, Y, TEXTROW
;
.PROC       CLEARLINE
            JSR LINEADDR
            LDA #SPACE
            LDY #SCREENWID-1
LOOPCOL     STA (TEXTROW),Y
            DEY
            BPL LOOPCOL
            RTS
.ENDPROC
;
;
;
; PRCURS
; Prints the cursor (inverses char at ROL,COL)
; input: ROW, COL
; scratch: TEXTROW, Y, A, X
;
.PROC       PRCURS
            JSR CHARADDR
            LDA #$60
            STA (TEXTROW),Y
            RTS
.ENDPROC
;
;
;
; PRCHAR
; Prints a normal character in A at ROW, COL;
; advances cursor; scrolls if necessary
; input: A, ROW, COL
; scratch: TEXTROW, Y, X
;
.PROC       PRCHAR
            PHA
            JSR CHARADDR
            PLA

            STA (TEXTROW),Y

            JSR ADVCUR
            RTS
.ENDPROC
;
;
;
; ADVCUR
; Advances cursor one position; scrolls if necessary.
;
.PROC       ADVCUR
            INC COL
            LDA COL
            CMP #SCREENWID
            BNE OK

            JSR PRCR
            JSR PRLF

OK          RTS
.ENDPROC
;
;
;
; PRCR
; Prints a carraige return (goes to start of same line)
; output: COL
; scratch: A
;
.PROC       PRCR
            LDA #0
            STA COL
            RTS
.ENDPROC
;
;
;
; PRLF
; Prints a line feed (goes down one line);
; scrolls if necessary
; input: ROW
; output: ROW
; scratch: A. Y, X, TMP, TMPW, TEXTROW
;
.PROC       PRLF
            INC ROW
            LDA ROW
            CMP #SCREENHGT
            BNE OK

            DEC ROW
            JSR SCROLL
            LDA #SCREENHGT-1
            JSR CLEARLINE
OK          RTS
.ENDPROC
;
;
;
; PRBS
; Prints a back-space (goes left one char)
; input: COL, ROW
; output: COL, ROW
; scratch: A
;
.PROC       PRBS
            DEC COL
            BPL OK
            LDA #SCREENWID-1
            STA COL
            DEC ROW
            BPL OK
            INC ROW
            LDA #0
            STA COL
OK          RTS
.ENDPROC
;
;
;
; PRPROMPT
; Prints the prompt character.
; input: ROW, COL
; scratch: A, TEXTROW, Y, X
;
.PROC       PRPROMPT
;            LDA #PROMPT
;            JSR PRCHAR
            JSR PRSTR
            .BYTE "E2>",0
            RTS
.ENDPROC
;
;
;
; RDCHAR
; Reads a character (waits for one) into A
; (high bit will be set)
;
.PROC       RDCHAR
            LDA CLEARKEY
NOKEY       LDA READKEY
            BPL NOKEY
            RTS
.ENDPROC
;
;
;
; WELCOME
;
.PROC       WELCOME
            JSR PRSTR
            .BYTE "EPPLE ][ DEMO ROM (GPLV3)  ? FOR HELP",0
            JSR PRCR
            JSR PRLF
            RTS
.ENDPROC
;
;
;
; PRSTR
; Prints a string (in code seg of caller)
;
.PROC       PRSTR
LOOP        PLA
            STA TMPW
            PLA
            STA TMPW+1
            INC TMPW
            BNE NOC
            INC TMPW+1
NOC         LDY #0
            LDA (TMPW),Y
            TAY
            LDA TMPW+1
            PHA
            LDA TMPW
            PHA
            TYA
            BEQ DONE
            JSR PRCHAR
            JMP LOOP
DONE

            RTS
.ENDPROC
;
;
; CVTHEX
; Parses hex character ('0'-'9' or 'A'-'F') in A
; and shifts into low-order nibble of TMPW.
; Undefined op if A contains something else.
;
.PROC       CVTHEX
            CMP #'A'
            BCC DIGIT
            SBC #'A'-'9'-1
DIGIT
            AND #%00001111
            ASL
            ASL
            ASL
            ASL

            ASL
            ROL TMPW
            ROL TMPW+1
            ASL
            ROL TMPW
            ROL TMPW+1
            ASL
            ROL TMPW
            ROL TMPW+1
            ASL
            ROL TMPW
            ROL TMPW+1
            RTS
.ENDPROC
;
;
; PRBYTE
; Prints byte in A as hex
;
.PROC       PRBYTE
            PHA
                ; ABCDxxxx
                ; 1011ABCD
            LSR
            LSR
            LSR
            LSR
            ORA #%10110000
            CMP #'9'+1
            BCC DIGIT
            ADC #'A'-'9'-2
DIGIT       JSR PRCHAR
            PLA
            AND #%00001111
            ORA #%10110000
            CMP #'9'+1
            BCC DIGIT2
            ADC #'A'-'9'-2
DIGIT2      JSR PRCHAR
            RTS
.ENDPROC
;
;
;
; SHELL
;
.PROC       SHELL
C_LOOP      LDA #0
            STA INBUFC
            JSR PRPROMPT


K_LOOP      JSR PRCURS
            JSR RDCHAR

K_CR        CMP #CR
            BNE K_BS
            LDA #SPACE
            JSR PRCHAR
            JSR COMMAND
            JMP C_LOOP

K_BS        CMP #BS
            BNE K_CHAR
            DEC INBUFC
            BPL K_BS_OK
            INC INBUFC
            JMP K_LOOP
K_BS_OK     JSR PRBS
            LDA #SPACE
            JSR PRCHAR
            LDA #SPACE
            JSR PRCHAR
            JSR PRBS
            JSR PRBS
            JMP K_LOOP

K_CHAR      LDY INBUFC
            STA INBUF,Y
            INC INBUFC
            BNE K_CHAR_OK
            DEC INBUFC
            JMP K_LOOP
K_CHAR_OK   JSR PRCHAR
            JMP K_LOOP
.ENDPROC
;
;
;
; COMMAND
;
.PROC       COMMAND
            JSR PRCR
            JSR PRLF



            LDY #0
            CPY INBUFC
            BNE PARS1
            RTS
PARS1       LDA INBUF,Y

CMD_H       CMP #'?'
            BEQ CMD_H_IMP
            JMP CMD_D
CMD_H_IMP
            JSR PRCR
            JSR PRLF

            JSR PRSTR
            .BYTE "COMMAND        ACTION",0
            JSR PRCR
            JSR PRLF

            JSR PRSTR
            .BYTE "-------------  ------------------------",0
            JSR PRCR
            JSR PRLF

            JSR PRSTR
            .BYTE "D XXXX [YYYY]  DUMP MEMORY XXXX TO YYYY",0
            JSR PRCR
            JSR PRLF

            JSR PRSTR
            .BYTE "R XXXX         RUN AT XXXX",0
            JSR PRCR
            JSR PRLF

            JSR PRSTR
            .BYTE "S XXXX YY      SET MEMORY XXXX TO YY",0
            JSR PRCR
            JSR PRLF

            JSR PRSTR
            .BYTE "?              SHOW HELP",0
            JSR PRCR
            JSR PRLF

            JSR PRSTR
            .BYTE "(ENTER ALL VALUES IN HEX)",0
            JSR PRCR
            JSR PRLF

            JSR PRCR
            JSR PRLF

            RTS

CMD_D       CMP #'D'
            BEQ CMD_D_IMP
            JMP CMD_R

CMD_D_IMP   LDA #0
            STA TMP

CMD_D_ARGS  LDA #0
            STA TMPW
            STA TMPW+1

            LDX #4
CMD_D_SP    INY
            CPY INBUFC
            BNE CMD_D_1
            LDA TMP
            BNE CMD_D_RUN
            RTS
CMD_D_1     LDA INBUF,Y
            CMP #SPACE
            BEQ CMD_D_SP
            JSR CVTHEX
            DEX
            BNE CMD_D_SP
            LDA TMP
            BNE CMD_D_RUN
            INC TMP
            LDA TMPW
            STA ADDR
            STA ADDR2
            LDA TMPW+1
            STA ADDR+1
            STA ADDR2+1
            JMP CMD_D_ARGS

CMD_D_RUN   LDA TMPW
            STA ADDR2
            LDA TMPW+1
            STA ADDR2+1

CMD_D_ADR   LDA ADDR+1
            JSR PRBYTE
            LDA ADDR
            JSR PRBYTE
            LDA #':'
            JSR PRCHAR

CMD_D_BYT   LDA #SPACE
            JSR PRCHAR
            LDY #0
            LDA (ADDR),Y
            JSR PRBYTE
            INC ADDR
            BNE CMD_D_NOOV
            INC ADDR+1
CMD_D_CKRO  LDA ADDR
            BNE CMD_D_NOOV
            LDA ADDR+1
            BEQ CMD_D_END
CMD_D_NOOV  LDA ADDR+1
            CMP ADDR2+1
            BNE CMD_D_NEXT
            LDA ADDR
            CMP ADDR2
CMD_D_NEXT  BCC CMD_D_CR
            BEQ CMD_D_CR
CMD_D_END   JSR PRCR
            JSR PRLF
            RTS
CMD_D_CR    LDA ADDR
            AND #%00000111
            BNE CMD_D_BYT
            JSR PRCR
            JSR PRLF
            JMP CMD_D_ADR

CMD_R       CMP #'R'
            BNE CMD_S
            LDX #4
CMD_R_SP    INY
            CPY INBUFC
            BNE CMD_R_1
            RTS
CMD_R_1     LDA INBUF,Y
            CMP #SPACE
            BEQ CMD_R_SP
            JSR CVTHEX
            DEX
            BNE CMD_R_SP
            JMP (TMPW)

CMD_S       CMP #'S'
            BEQ CMD_S_IMP
            RTS
CMD_S_IMP   LDX #4
CMD_S_SP    INY
            CPY INBUFC
            BNE CMD_S_1
            RTS
CMD_S_1     LDA INBUF,Y
            CMP #SPACE
            BEQ CMD_S_SP
            JSR CVTHEX
            DEX
            BNE CMD_S_SP
            LDA TMPW
            STA ADDR
            LDA TMPW+1
            STA ADDR+1

            LDX #2
CMD_S_SP2   INY
            CPY INBUFC
            BNE CMD_S_2
            RTS
CMD_S_2     LDA INBUF,Y
            CMP #SPACE
            BEQ CMD_S_SP2
            JSR CVTHEX
            DEX
            BNE CMD_S_SP2
            LDA TMPW
            LDY #0
            STA (ADDR),Y
            RTS
.ENDPROC
;
;
;
.PROC       VECTORS
            NOP
            NOP
            .ADDR RESET
            .ADDR RESET
            .ADDR RESET
.ENDPROC
