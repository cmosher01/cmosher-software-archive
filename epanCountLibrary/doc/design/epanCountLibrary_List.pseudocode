REQUEST-LIST MANAGEMENT
-----------------------
These classes allow the caller to monitor a list
of requests for changes. This would typically be
used to display a list of all requests since
90 days ago to the user. As other users add, remove,
or edit requests, the listener object for this
user will get called, allowing the GUI to refresh
to reflect the changes.
Requests are grouped into "teams," generally
reflecting Sales Dept. territories.
(Rethinking this: instead of predefined teams
that need to be maintained, let each user of the system
choose which other users' queries he wants to see in his list.
Store this choice in the database so we can join against it,
and so it is persistent across runs and releases.)
Typically, you create an EpanCountListMonitor
object for the team whose list of requests is to be
displayed. Then call addChangeListener passing in
a listener object. Call start and stop to turn the
monitoring process on or off as desired.
Every time a change happens, the listener's appropriate
method will be called (add or remove). The changes
are reported as indexes into a list sorted by the
comparator passed in by the caller. This is typically
where the caller would update the display to reflect
the changes. The data are communicated to the caller
(through the listener) in an EpanCountListItem object.
This monitoring will be done by a background thread
that queries the data store periodically, as passed
in to the construtor. Additionally, the caller can
call forceCheckNow to do an immediate check.
Subsequently, the caller would typically want to access
the requests; this is accomplished by retrieving the
primary key by the getPK method, then using that key
to access EpanCountRequest.







---------
INTERFACE
---------







EpanCountListMonitor
--------------------

EpanCountListMonitor(daysOld,team,checkEverySeconds)
    init to retrieve items daysOld or newer
start()
stop()
isRunning()
addChangeListener(EpanCountListChangeListener)
    all list change notifications go to listener
    first call creates thread to monitor db for new/changed/deleted counts
removeChangeListener(EpanCountListChangeListener listener)
    removes listener
forceCheckNow()
    in case the caller wants to force a check immediately, instead of
    waiting for the next normal, periodic check
close()
    kills the monitoring thread; removes all listeners


EpanCountListChangeListener interface
---------------------------
(implemented by user)

getComparator()
    returns the Comparator used to sort the list of requests
add(index,EpanCountListItem)
    [mimics javax.swing.DefaultListModel.add]
remove(index)
    [mimics javax.swing.DefaultListModel.remove]



EpanCountListItem
-----------------
Contains skeletal information about a request
(generally useful for displaying a list of requests)

s = getClient()
s = getTopic()
date = getCreationDate()
date = getLastModifiedDate()
n = getQueryCount()
n = getQueryCountSoFar()
    only includes successfully completed queries
pk = getPK()
    use this to access the full EpanCountRequest data














--------------
IMPLEMENTATION
--------------







ListMonitor
-----------
(This is a pretty generic class. It queries a given
interface for changes to some set of items, and
sends add or remove messages to a listener when
the list changes. This class checks periodically,
every given number of seconds.)

state (every access to these must be synchronized):
    MonitorableList
    checkEverySeconds
    list of listeners (each entry has:)
        listener
        comparator (actually stored in the listener itself)
        list of items ordered by comparator
        lastMod
    monitor thread
    "stop" flag
    "force check" flag

ListMonitor(MonitorableList, int checkEverySeconds)
    set member variables for arguments

start()
    clear "stop" flag
    create monitor thread
    start its internal thread run()

stop()
    set "stop" flag (which deletes monitor thread)

isRunning()
    return not "stop" flag

addChangeListener(EpanCountListChangeListener listener)
    add listener to list of listeners

removeChangeListener(EpanCountListChangeListener listener)
    if listener is in list
        remove listener from list of listeners
        return true
    else
        return false

forceCheckNow()
    set "force check" flag

close()
    if not "stop" flag
        stop()
        wait for monitor thread to exit
    remove all listeners from list of listeners

finalize()
    close()

run() (called by the monitor thread)
    while not "stop" flag
        clear "force check" flag
        for each listener
            MonitorableList.getChangesSince(lastMod) (returns
                list of EpanCountListItem item)
            (trap any exception: and treat as empty list)
            for each item
                (TODO this handles inserts and updates, but not deletes)
                if item exists in listener's list of items
                    tellListener(listener,remove,index)
                tellListener(listener,add,index,item)
            lastMod = maximum last modified time in resulting requests
        wait for checkEverySeconds, or "force check", or "stop"

tellListener(EpanCountListChangeListener listener, add/remove, index, EpanCountListItem item)
    start new "notification" thread:
        call listener.add(index,item) or listener.remove(index)




MonitorableList interface
---------------
getChangesSince(lastMod,listOfRemoves,listOfAdds)





RequestQueryHandler implements MonitorableList
-------------------
queries the data store for a set of requests meeting
certain criteria (<=daysOld, last mod since, and team)
(for testing purposes, without a database, this object could be
implemented to mock up a datastore, sometimes returning
a list with changes, sometime not).

RequestQueryHandler(daysOld,team)

List<EpanCountListItem> getChangesSince(lastMod,listOfRemoves,listOfAdds)
    create PreparedStatement st as "SELECT ... WHERE created >= today-daysOld and
        last modified time >= lastMod and team = team"
    ResultSet rs = DBThread.executeQuery(st)
    create empty list of items
    for each row in rs
        build new EpanCountListItem
        add to list
    return list of items
    TODO need to select from "deleted" table for removes???
