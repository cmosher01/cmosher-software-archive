create new object in memory
---------------------------
this.pk = new UUID
this.v = default value

insert new data into database from object in memory
---------------------------------------------------
st = INSERT INTO Table (v,ID) VALUES (?,?)

putKeyToPS(this.pk,st,1)
st.setType(2,this.v)

st.executeUpdate()
if updated rows != 1, throw
insertChildRecords() ???

read existing data from database into new object in memory(pk) (special case of reading a set of records, see below)
--------------------------------------------------------------
this.pk = pk
st = SELECT v FROM Table WHERE tableID = ?

putKeyToPS(this.pk,st)

ResultSet rs = st.executeQuery()
rs.next (only once)

this.v = rs.getType("v")

rs.close()
readChildRecords(this.pk,this.rChild)

update existing data in database from object in memory
------------------------------------------------------
st = UPDATE Table SET v = ? WHERE ID = ?

st.setType(1,this.v)
putKeyToPS(this.pk,st,2)

st.executeUpdate()
if updated rows != 1, throw
deleteChildRecords(this.pk)
insertChildRecords()

delete existing data from database(pk/fk)
-----------------------------------------
st = DELETE FROM Table WHERE tableID/parentID = ?

putKeyToPS(pk/fk,st,1)

st.executeUpdate()



read record(pk)
---------------
list r
readSetOfRecords(pk,r)
return r.get(0);

read existing child data from database into new objects in memory(pkParent,rAppendTo)
-------------------------------------------------------------------------------------
st = SELECT v FROM Table WHERE parentID = ?

putKeyToPS(pkParent,st)

ResultSet rs = st.executeQuery()
while (rs.next)
{
    rAppendTo.add(new object(rs.getType("v")))
}
rs.close()
readChildRecords(this.pk,this.rChild)








static create(pk) {rs = readRecord(pk); return new object(rs); readChildren(pk,obj.rChild)}
static create()   {return new object()}
object()   {fills with default values, including new pk}
object(rs) {reads from recordset, no children}

putToPS(ps) {ps.setType(1,"v")}

delete()   {delete(this.pk)}
static delete(pk) {deletes row}
update() {updates row, deletes children, inserts children}















class Thing
{
}
